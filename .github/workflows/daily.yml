name: LinuxDo Multi-Site Automation

on:
  workflow_dispatch:
    inputs:
      site_selector:
        description: '选择要运行的站点'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - linux_do
          - idcflare
  schedule:
    - cron: '0 * * * *'

jobs:
  automate:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libnss3 libnspr4 libatk1.0-0 libatk-bridge2.0-0 \
          libcups2 libdrm2 libxkbcommon0 libxdamage1 libxcomposite1 \
          libxrandr2 libgbm1 libpango-1.0-0 libcairo2 \
          libatspi2.0-0 libx11-xcb1 libasound2t64 \
          tesseract-ocr tesseract-ocr-chi-sim tesseract-ocr-eng \
          python3-pil python3-pip \
          libffi8 libx264-164

    - name: Cache Playwright browsers
      uses: actions/cache@v4
      id: playwright-cache
      with:
        path: ~/.cache/ms-playwright
        key: ${{ runner.os }}-playwright-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-playwright-

    # 恢复缓存 - 使用简单固定的缓存键
    - name: Restore automation cache
      uses: actions/cache@v4
      id: automation-cache
      with:
        path: |
          *.json
          *.log
        key: automation-cache-v1
        restore-keys: |
          automation-cache-

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        if [ "${{ steps.playwright-cache.outputs.cache-hit }}" != 'true' ]; then
          python -m playwright install chromium
        fi

    - name: Run automation script
      timeout-minutes: 45
      env:
        LINUXDO_USERNAME: ${{ secrets.LINUXDO_USERNAME }}
        LINUXDO_PASSWORD: ${{ secrets.LINUXDO_PASSWORD }}
        IDCFLARE_USERNAME: ${{ secrets.IDCFLARE_USERNAME }}
        IDCFLARE_PASSWORD: ${{ secrets.IDCFLARE_PASSWORD }}
        HEADLESS: 'true'
      run: |
        echo "🚀 开始执行多站点自动化脚本..."
        # 显示当前目录状态
        echo "📁 运行前目录状态:"
        ls -la *.json 2>/dev/null || echo "无JSON缓存文件"
        
        # 如果有缓存文件，显示年龄
        for file in *.json; do
          if [ -f "$file" ]; then
            file_age=$(( ($(date +%s) - $(stat -c %Y "$file")) / 3600 ))
            echo "📄 $file - 年龄: ${file_age} 小时"
          fi
        done
        
        timeout 2700s python main.py || echo "⏰ 脚本执行完成"

    # 保存缓存 - 使用相同的固定缓存键
    - name: Save automation cache
      uses: actions/cache@v4
      if: success()
      with:
        path: |
          *.json
          *.log
        key: automation-cache-v1

    - name: Upload results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: automation-results
        path: |
          final_status_*.json
          session_data_*.json
          cf_cookies_*.json
          browser_state_*.json
          *.png
          *.log
        retention-days: 7
