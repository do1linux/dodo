name: LinuxDo Multi-Site Automation

on:
  workflow_dispatch:
    inputs:
      site_selector:
        description: '选择要运行的站点'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - linux_do
          - idcflare
  schedule:
    - cron: '0 * * * *'

jobs:
  automate:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libnss3 libnspr4 libatk1.0-0 libatk-bridge2.0-0 \
          libcups2 libdrm2 libxkbcommon0 libxdamage1 libxcomposite1 \
          libxrandr2 libgbm1 libpango-1.0-0 libcairo2 \
          libatspi2.0-0 libx11-xcb1 libasound2t64 \
          python3-pip

    - name: Cache Python dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Cache Playwright browsers
      uses: actions/cache@v4
      id: playwright-cache
      with:
        path: ~/.cache/ms-playwright
        key: ${{ runner.os }}-playwright-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-playwright-

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        if [ "${{ steps.playwright-cache.outputs.cache-hit }}" != 'true' ]; then
          python -m playwright install chromium
        fi

    - name: Create cache directory
      run: mkdir -p cache

    - name: Download previous cookies
      uses: actions/download-artifact@v4
      with:
        name: linux-do-cookies
        path: cache/
      continue-on-error: true  # 如果之前没有cookies，继续执行

    - name: Run automation script
      timeout-minutes: 45
      env:
        LINUXDO_USERNAME: ${{ secrets.LINUXDO_USERNAME }}
        LINUXDO_PASSWORD: ${{ secrets.LINUXDO_PASSWORD }}
        IDCFLARE_USERNAME: ${{ secrets.IDCFLARE_USERNAME }}
        IDCFLARE_PASSWORD: ${{ secrets.IDCFLARE_PASSWORD }}
        OCR_API_KEY: ${{ secrets.OCR_API_KEY }}
        HEADLESS: 'true'
        BROWSE_ENABLED: 'true'
      run: |
        echo "🚀 开始执行多站点自动化脚本..."
        echo "📦 检查cookies文件..."
        if [ -f "cache/linux_do_cookies.json" ]; then
          echo "✅ 找到缓存的cookies文件"
        else
          echo "❌ 未找到缓存的cookies文件，将进行完整登录"
        fi
        python main.py

    - name: Upload new cookies
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: linux-do-cookies
        path: cache/linux_do_cookies.json
        retention-days: 30
        overwrite: true  # 覆盖旧的cookies

    - name: Upload automation results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: automation-results
        path: |
          cache/*.json
          *.log
          *.png
        retention-days: 7
