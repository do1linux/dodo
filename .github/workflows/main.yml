name: LinuxDo Automation

on:
  schedule:
    - cron: '0 * * * *'  # 每小时运行一次
  workflow_dispatch:

jobs:
  automate:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # ========== 系统依赖安装 ==========
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libnss3 libnspr4 libatk1.0-0 libatk-bridge2.0-0 \
          libcups2 libdrm2 libxkbcommon0 libxdamage1 libxcomposite1 \
          libxrandr2 libgbm1 libpango-1.0-0 libcairo2 \
          libatspi2.0-0 libx11-xcb1 libasound2t64 \
          tesseract-ocr tesseract-ocr-chi-sim tesseract-ocr-eng \
          python3-pil python3-pip \
          libffi8 libx264-164

    # ========== 浏览器环境缓存 ==========
    - name: Cache Playwright browsers
      uses: actions/cache@v4
      id: playwright-cache
      with:
        path: ~/.cache/ms-playwright
        key: ${{ runner.os }}-playwright-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-playwright-

    # ========== 应用状态缓存 ==========
    - name: Cache application state
      uses: actions/cache@v4
      id: app-state-cache
      with:
        path: |
          cf_cookies.json
          browser_state.json
          session_data.json
          final_status.json
          connect_info.txt
        key: ${{ runner.os }}-app-state-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-app-state-

    # ========== Python环境配置 ==========
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Cache Python packages
      uses: actions/cache@v4
      id: pip-cache
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        if [ "${{ steps.playwright-cache.outputs.cache-hit }}" != 'true' ]; then
          python -m playwright install chromium
        fi

    # ========== 执行核心任务 ==========
    - name: Run automation script
      timeout-minutes: 30
      env:
        LINUXDO_USERNAME: ${{ secrets.LINUXDO_USERNAME }}
        LINUXDO_PASSWORD: ${{ secrets.LINUXDO_PASSWORD }}
        OCR_API_KEY: ${{ secrets.OCR_API_KEY }}
        HEADLESS: 'true'
        GITHUB_ACTIONS: 'true'
      run: |
        timeout 1800s python main.py || echo "🚀LinuxDo自动化脚本启动🚀"
        
        echo "=== 执行结果 ==="
        if [ -f "final_status.json" ]; then
          echo "最终状态:"
          cat final_status.json
        fi
        
        if [ -f "connect_info.txt" ]; then
          echo "Connect信息已生成"
        fi

    # ========== 保存缓存 ==========
    - name: Save application state cache
      uses: actions/cache/save@v4
      if: always()
      with:
        path: |
          cf_cookies.json
          browser_state.json
          session_data.json
          final_status.json
          connect_info.txt
        key: ${{ runner.os }}-app-state-${{ github.sha }}

    # ========== 结果归档 ==========
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: automation-results
        path: |
          connect_info.txt
          cf_cookies.json
          browser_state.json
          session_data.json
          final_status.json
          *.png
          automator.log
        retention-days: 7

    # ========== 状态报告 ==========
    - name: Report status
      if: always()
      run: |
        echo "=== 运行状态报告 ==="
        echo "工作流: ${{ github.workflow }}"
        echo "运行ID: ${{ github.run_id }}"
        echo "触发事件: ${{ github.event_name }}"
        
        if [ -f "final_status.json" ]; then
          echo "脚本执行状态: $(python -c "import json; data=json.load(open('final_status.json')); print(data.get('message', '未知'))")"
          echo "重试次数: $(python -c "import json; data=json.load(open('final_status.json')); print(data.get('retry_count', 0))")"
        else
          echo "脚本执行状态: 未完成或状态文件缺失"
        fi
        
        if [ -f "connect_info.txt" ]; then
          echo "Connect信息: 已生成"
        else
          echo "Connect信息: 未生成"
        fi
