import os
import sys
import time
import random
import asyncio
import json
import math
import traceback
import pytesseract
import requests
from datetime import datetime, timedelta
from urllib.parse import urljoin
from io import BytesIO
from PIL import Image
from playwright.async_api import async_playwright
from loguru import logger
from tenacity import retry, stop_after_attempt, wait_fixed, retry_if_exception_type
from tabulate import tabulate

# ======================== Â§öÁΩëÁ´ôÈÖçÁΩÆ ========================
SITE_CREDENTIALS = {
    'linux_do': {
        'username': os.getenv('LINUXDO_USERNAME'),
        'password': os.getenv('LINUXDO_PASSWORD')
    },
    'idcflare': {
        'username': os.getenv('IDCFLARE_USERNAME'),
        'password': os.getenv('IDCFLARE_PASSWORD')
    }
}

HEADLESS_MODE = os.getenv('HEADLESS', 'true').lower() == 'true'

SITES = [
    {
        'name': 'linux_do',
        'base_url': 'https://linux.do',
        'login_url': 'https://linux.do/login',
        'latest_topics_url': 'https://linux.do/latest',
        'cf_cookies_file': "cf_cookies_linux_do.json",
        'browser_state_file': "browser_state_linux_do.json", 
        'session_file': "session_data_linux_do.json",
        'final_status_file': "final_status_linux_do.json"
    },
    {
        'name': 'idcflare',
        'base_url': 'https://idcflare.com',
        'login_url': 'https://idcflare.com/login',
        'latest_topics_url': 'https://idcflare.com/latest',
        'cf_cookies_file': "cf_cookies_idcflare.json",
        'browser_state_file': "browser_state_idcflare.json",
        'session_file': "session_data_idcflare.json", 
        'final_status_file': "final_status_idcflare.json"
    }
]

PAGE_TIMEOUT = 180000
RETRY_TIMES = 2

# ======================== Â¢ûÂº∫ÁöÑÂèçÊ£ÄÊµãÈÖçÁΩÆ ========================
USER_AGENTS = [
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36',
    'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36',
    'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36',
]

VIEWPORT_SIZES = [
    {'width': 1920, 'height': 1080},
    {'width': 1366, 'height': 768},
    {'width': 1536, 'height': 864},
]

# ======================== ÁºìÂ≠òÁÆ°ÁêÜÂô® ========================
class EnhancedCacheManager:
    @staticmethod
    def get_cache_path(file_name):
        return file_name

    @staticmethod
    def load_cache(file_name, max_age_hours=None):
        path = EnhancedCacheManager.get_cache_path(file_name)
        if os.path.exists(path):
            try:
                with open(path, "r", encoding='utf-8') as f:
                    data = json.load(f)
                
                if 'cache_timestamp' in data:
                    cache_time = datetime.fromisoformat(data['cache_timestamp'])
                    age_hours = (datetime.now() - cache_time).total_seconds() / 3600
                    age_status = "ËæÉÊñ∞" if age_hours < 12 else "ËæÉÊóß"
                    logger.info(f"üì¶ Âä†ËΩΩÁºìÂ≠ò {file_name} (Âπ¥ÈæÑ: {age_hours:.1f}Â∞èÊó∂, {age_status})")
                
                if 'data' in data:
                    return data['data']
                else:
                    return data
            except Exception as e:
                logger.warning(f"ÁºìÂ≠òÂä†ËΩΩÂ§±Ë¥• {path}: {str(e)}")
        else:
            logger.info(f"üì≠ ÁºìÂ≠òÊñá‰ª∂‰∏çÂ≠òÂú®: {file_name}")
        return None

    @staticmethod
    def save_cache(data, file_name):
        path = EnhancedCacheManager.get_cache_path(file_name)
        try:
            data_to_save = {
                'data': data,
                'cache_timestamp': datetime.now().isoformat(),
                'cache_version': '1.3'
            }
            
            with open(path, "w", encoding='utf-8') as f:
                json.dump(data_to_save, f, ensure_ascii=False, indent=2)
            logger.info(f"‚úÖ ÁºìÂ≠òÂ∑≤‰øùÂ≠òÂà∞ {path}")
            return True
        except Exception as e:
            logger.error(f"ÁºìÂ≠ò‰øùÂ≠òÂ§±Ë¥• {path}: {str(e)}")
            return False

    @staticmethod
    def load_session_data(site_name):
        file_name = f"session_data_{site_name}.json"
        return EnhancedCacheManager.load_cache(file_name)

    @staticmethod
    def save_session_data(data, site_name):
        file_name = f"session_data_{site_name}.json"
        return EnhancedCacheManager.save_cache(data, file_name)

    @staticmethod
    def load_cf_cookies(site_name):
        file_name = f"cf_cookies_{site_name}.json"
        return EnhancedCacheManager.load_cache(file_name)

    @staticmethod
    def save_cf_cookies(data, site_name):
        file_name = f"cf_cookies_{site_name}.json"
        return EnhancedCacheManager.save_cache(data, file_name)

    @staticmethod
    def load_browser_state(site_name):
        file_name = f"browser_state_{site_name}.json"
        return EnhancedCacheManager.load_cache(file_name)

    @staticmethod
    def save_browser_state(data, site_name):
        file_name = f"browser_state_{site_name}.json"
        return EnhancedCacheManager.save_cache(data, file_name)

    @staticmethod
    def load_final_status(site_name):
        file_name = f"final_status_{site_name}.json"
        return EnhancedCacheManager.load_cache(file_name)

    @staticmethod
    def save_final_status(data, site_name):
        file_name = f"final_status_{site_name}.json"
        return EnhancedCacheManager.save_cache(data, file_name)

# ======================== ÁªàÊûÅCloudflareÂ§ÑÁêÜÂô® ========================
class UltimateCloudflareHandler:
    @staticmethod
    async def handle_cloudflare(page, site_config, max_attempts=8, timeout=180):
        """‰øÆÂ§çÁöÑCloudflareÂ§ÑÁêÜ - ‰ΩøÁî®Ê≠£Á°ÆÁöÑsite_config"""
        domain = site_config['base_url'].replace('https://', '')
        start_time = time.time()
        logger.info(f"üõ°Ô∏è ÂºÄÂßãÂ§ÑÁêÜ {domain} CloudflareÈ™åËØÅ")
        
        # 1. È¶ñÂÖàÊ£ÄÊü•ÁºìÂ≠ò‰∏≠ÁöÑCloudflare cookies
        cached_cf_valid = await UltimateCloudflareHandler.is_cached_cf_valid(site_config['name'])
        if cached_cf_valid:
            logger.success(f"‚úÖ Ê£ÄÊµãÂà∞ÊúâÊïàÁöÑÁºìÂ≠òCloudflare cookieÔºåÂ∞ùËØïÁõ¥Êé•ÁªïËøáÈ™åËØÅ")
            # Â∞ùËØïÁõ¥Êé•ËÆøÈóÆ/latestÈ°µÈù¢
            try:
                await page.goto(site_config['latest_topics_url'], wait_until='networkidle', timeout=60000)
                await asyncio.sleep(5)
                
                page_title = await page.title()
                if page_title != "ËØ∑Á®çÂÄô‚Ä¶" and "Checking" not in page_title:
                    logger.success("‚úÖ ‰ΩøÁî®ÁºìÂ≠òÊàêÂäüÁªïËøáCloudflareÈ™åËØÅ")
                    return True
            except Exception as e:
                logger.warning(f"‰ΩøÁî®ÁºìÂ≠òÁªïËøáÂ§±Ë¥•: {str(e)}")
        
        # 2. Â¶ÇÊûúÊ≤°ÊúâÊúâÊïàÁºìÂ≠òÔºåËøõË°åÂÆåÊï¥È™åËØÅ
        logger.info(f"üîÑ ÂºÄÂßãÂÆåÊï¥CloudflareÈ™åËØÅÊµÅÁ®ã")
        for attempt in range(max_attempts):
            try:
                current_url = page.url
                page_title = await page.title()
                
                logger.info(f"üîç Ê£ÄÊü•È°µÈù¢Áä∂ÊÄÅ - URL: {current_url}, Ê†áÈ¢ò: {page_title}")
                
                # Ê£ÄÊü•ÊòØÂê¶ÊúâÊúâÊïàÁöÑcf_clearance cookie
                cf_valid = await UltimateCloudflareHandler.is_cf_clearance_valid(page.context, domain)
                
                if cf_valid:
                    logger.success(f"‚úÖ Ê£ÄÊµãÂà∞ÊúâÊïàÁöÑ cf_clearance cookie")
                    
                    # Â¶ÇÊûúcookieÊúâÊïà‰ΩÜÈ°µÈù¢Âç°‰ΩèÔºåÂ∞ùËØïÂº∫Âà∂Ëß£ÂÜ≥ÊñπÊ°à
                    if page_title == "ËØ∑Á®çÂÄô‚Ä¶" or "Checking your browser" in await page.content():
                        logger.info("üîÑ CookieÊúâÊïà‰ΩÜÈ°µÈù¢Âç°‰ΩèÔºåÂ∞ùËØïÂº∫Âà∂Ëß£ÂÜ≥ÊñπÊ°à")
                        
                        # Â∞ùËØïÁõ¥Êé•ËÆøÈóÆÂÖ∂‰ªñË∑ØÂæÑ
                        try:
                            await page.goto(site_config['latest_topics_url'], wait_until='networkidle', timeout=60000)
                            await asyncio.sleep(5)
                            
                            new_title = await page.title()
                            if new_title != "ËØ∑Á®çÂÄô‚Ä¶":
                                logger.success("‚úÖ ÈÄöËøáËÆøÈóÆ/latestÈ°µÈù¢ÊàêÂäüÁªïËøáÂç°‰ΩèÁöÑ‰∏ªÈ°µ")
                                return True
                        except Exception as e:
                            logger.warning(f"ËÆøÈóÆ/latestÈ°µÈù¢Â§±Ë¥•: {str(e)}")
                    
                    else:
                        logger.success(f"‚úÖ {domain} È°µÈù¢Â∑≤Ê≠£Â∏∏Âä†ËΩΩ")
                        return True
                else:
                    # Ê£ÄÊü•È°µÈù¢ÊòØÂê¶Â∑≤ÁªèÊ≠£Â∏∏Âä†ËΩΩÔºàÂç≥‰ΩøÊ≤°Êúâcf_clearance cookieÔºâ
                    if page_title != "ËØ∑Á®çÂÄô‚Ä¶" and "Checking" not in page_title:
                        logger.success(f"‚úÖ {domain} È°µÈù¢Â∑≤Ê≠£Â∏∏Âä†ËΩΩÔºåCloudflareÈ™åËØÅÈÄöËøá")
                        return True
                    
                    # Â¶ÇÊûúÊ≤°ÊúâÊúâÊïàÁöÑcookieÔºåÁªßÁª≠Á≠âÂæÖÈ™åËØÅ
                    wait_time = random.uniform(8, 15)
                    logger.info(f"‚è≥ Á≠âÂæÖCloudflareÈ™åËØÅÂÆåÊàê ({wait_time:.1f}Áßí) - Â∞ùËØï {attempt + 1}/{max_attempts}")
                    await asyncio.sleep(wait_time)
                    
                    # ÊØèÊ¨°Á≠âÂæÖÂêéÈÉΩÊ£ÄÊü•cookieÊòØÂê¶ÂèòÂæóÊúâÊïà
                    cf_valid_after_wait = await UltimateCloudflareHandler.is_cf_clearance_valid(page.context, domain)
                    if cf_valid_after_wait:
                        logger.success(f"‚úÖ Á≠âÂæÖÂêéÊ£ÄÊµãÂà∞ÊúâÊïàÁöÑ cf_clearance cookieÔºåÊèêÂâçÁªìÊùüÈ™åËØÅ")
                        return True
                    
                    # ÂÅ∂Â∞îÂà∑Êñ∞È°µÈù¢
                    if attempt % 3 == 0:
                        logger.info("üîÑ Âà∑Êñ∞È°µÈù¢")
                        await page.reload(wait_until='networkidle', timeout=60000)
                        await asyncio.sleep(3)
                
                # Ê£ÄÊü•Ë∂ÖÊó∂
                if time.time() - start_time > timeout:
                    logger.warning(f"‚ö†Ô∏è {domain} CloudflareÂ§ÑÁêÜË∂ÖÊó∂")
                    break
                    
            except Exception as e:
                logger.error(f"{domain} CloudflareÂ§ÑÁêÜÂºÇÂ∏∏ (Â∞ùËØï {attempt + 1}): {str(e)}")
                await asyncio.sleep(10)
        
        # ÊúÄÁªàÊ£ÄÊü• - Êõ¥ÂÆΩÊùæÁöÑÂà§Êñ≠Êù°‰ª∂
        final_cf_valid = await UltimateCloudflareHandler.is_cf_clearance_valid(page.context, domain)
        page_title = await page.title()
        
        if final_cf_valid or (page_title != "ËØ∑Á®çÂÄô‚Ä¶" and "Checking" not in page_title):
            logger.success(f"‚úÖ ÊúÄÁªàÈ™åËØÅ: {domain} CloudflareÈ™åËØÅÈÄöËøá")
            return True
        else:
            logger.warning(f"‚ö†Ô∏è ÊúÄÁªàÈ™åËØÅ: {domain} CloudflareÈ™åËØÅÊú™ÂÆåÂÖ®ÈÄöËøáÔºå‰ΩÜÁªßÁª≠ÂêéÁª≠ÊµÅÁ®ã")
            return True  # Âç≥‰ΩøÊ≤°ÊúâÂÆåÂÖ®ÈÄöËøá‰πüÁªßÁª≠ÂêéÁª≠ÊµÅÁ®ã

    @staticmethod
    async def is_cached_cf_valid(site_name):
        """Ê£ÄÊü•ÁºìÂ≠ò‰∏≠ÁöÑCloudflare cookieÊòØÂê¶ÊúâÊïà"""
        try:
            cf_cookies = EnhancedCacheManager.load_cf_cookies(site_name)
            if not cf_cookies:
                logger.info(f"üì≠ {site_name} Êó†CloudflareÁºìÂ≠ò")
                return False
            
            # Ê£ÄÊü•ÊòØÂê¶Êúâcf_clearance cookie‰∏îÊú™ËøáÊúü
            for cookie in cf_cookies:
                if cookie.get('name') == 'cf_clearance':
                    expires = cookie.get('expires', 0)
                    if expires == -1 or expires > time.time():
                        logger.info(f"‚úÖ {site_name} ÁºìÂ≠ò‰∏≠ÁöÑCloudflare cookieÊúâÊïà")
                        return True
            
            logger.info(f"üì≠ {site_name} ÁºìÂ≠ò‰∏≠ÁöÑCloudflare cookieÂ∑≤ËøáÊúü")
            return False
        except Exception as e:
            logger.warning(f"Ê£ÄÊü•ÁºìÂ≠òcookieÂ§±Ë¥•: {str(e)}")
            return False

    @staticmethod
    async def is_cf_clearance_valid(context, domain):
        try:
            cookies = await context.cookies()
            for cookie in cookies:
                if cookie.get('name') == 'cf_clearance' and domain in cookie.get('domain', ''):
                    # Ê£ÄÊü•cookieÊòØÂê¶ËøáÊúü
                    expires = cookie.get('expires', 0)
                    if expires == -1 or expires > time.time():
                        return True
            return False
        except Exception:
            return False

# ======================== ÊµèËßàÂô®ÁÆ°ÁêÜÂô® ========================
class BrowserManager:
    USER_AGENTS = USER_AGENTS
    VIEWPORT_SIZES = VIEWPORT_SIZES

    @staticmethod
    async def init_browser():
        playwright = await async_playwright().start()
        
        user_agent = random.choice(BrowserManager.USER_AGENTS)
        viewport = random.choice(BrowserManager.VIEWPORT_SIZES)
        
        logger.info(f"‰ΩøÁî® User-Agent: {user_agent[:50]}...")
        logger.info(f"‰ΩøÁî®ËßÜÂè£Â§ßÂ∞è: {viewport}")

        browser_args = [
            '--no-sandbox',
            '--disable-dev-shm-usage',
            '--disable-blink-features=AutomationControlled',
            f'--window-size={viewport["width"]},{viewport["height"]}',
            '--lang=zh-CN,zh;q=0.9,en;q=0.8',
            '--disable-features=VizDisplayCompositor',
            '--disable-background-timer-throttling',
            '--disable-backgrounding-occluded-windows',
            '--disable-renderer-backgrounding',
        ]

        browser = await playwright.chromium.launch(
            headless=HEADLESS_MODE,
            args=browser_args
        )
        
        return browser, playwright

    @staticmethod
    async def create_context(browser, site_name):
        # ÂÖàÊ£ÄÊü•ÊòØÂê¶ÊúâÊµèËßàÂô®Áä∂ÊÄÅÁºìÂ≠ò
        has_browser_state = EnhancedCacheManager.load_browser_state(site_name) is not None
        has_cf_cookies = EnhancedCacheManager.load_cf_cookies(site_name) is not None
        
        logger.info(f"üîç {site_name} ÁºìÂ≠òÁä∂ÊÄÅ - ÊµèËßàÂô®Áä∂ÊÄÅ: {'‚úÖ' if has_browser_state else '‚ùå'}, Cloudflare Cookies: {'‚úÖ' if has_cf_cookies else '‚ùå'}")
        
        storage_state = EnhancedCacheManager.load_browser_state(site_name)
        
        user_agent = random.choice(BrowserManager.USER_AGENTS)
        viewport = random.choice(BrowserManager.VIEWPORT_SIZES)
        
        context = await browser.new_context(
            viewport=viewport,
            user_agent=user_agent,
            locale='zh-CN',
            timezone_id='Asia/Shanghai',
            storage_state=storage_state,
            ignore_https_errors=True,
            java_script_enabled=True,
        )
        
        await BrowserManager.load_caches_into_context(context, site_name)
        await context.add_init_script(BrowserManager.get_anti_detection_script())
        
        return context

    @staticmethod
    async def load_caches_into_context(context, site_name):
        try:
            cf_cookies = EnhancedCacheManager.load_cf_cookies(site_name)
            if cf_cookies:
                # ËøáÊª§ÊéâËøáÊúüÁöÑcookie
                current_time = time.time()
                valid_cookies = []
                for cookie in cf_cookies:
                    expires = cookie.get('expires', 0)
                    if expires == -1 or expires > current_time:
                        valid_cookies.append(cookie)
                
                if valid_cookies:
                    await context.add_cookies(valid_cookies)
                    logger.info(f"‚úÖ Â∑≤‰ªéÁºìÂ≠òÂä†ËΩΩ {len(valid_cookies)} ‰∏™ {site_name} Cloudflare cookies")
                else:
                    logger.warning(f"‚ö†Ô∏è {site_name} ÊâÄÊúâÁºìÂ≠òÁöÑCloudflare cookiesÂ∑≤ËøáÊúü")
        except Exception as e:
            logger.error(f"‚ùå Âä†ËΩΩ {site_name} ÁºìÂ≠òÂà∞‰∏ä‰∏ãÊñáÊó∂Âá∫Èîô: {e}")

    @staticmethod
    def get_anti_detection_script():
        return """
            Object.defineProperty(navigator, 'webdriver', { get: () => undefined });
            Object.defineProperty(navigator, 'plugins', { get: () => [1, 2, 3, 4, 5] });
            Object.defineProperty(navigator, 'languages', { get: () => ['zh-CN', 'zh', 'en-US', 'en'] });
            window.chrome = { runtime: {}, loadTimes: function() {}, csi: function() {}, app: {isInstalled: false} };
            Object.defineProperty(navigator, 'platform', { get: () => 'Win32' });
            Object.defineProperty(navigator, 'hardwareConcurrency', { get: () => 8 });
        """

# ======================== ‰∏ªËá™Âä®ÂåñÁ±ª ========================
class LinuxDoAutomator:
    def __init__(self, site_config):
        self.site_config = site_config
        self.browser = None
        self.context = None
        self.page = None
        self.playwright = None
        self.is_logged_in = False
        self.retry_count = 0
        self.session_data = EnhancedCacheManager.load_session_data(site_config['name']) or {}
        self.cf_passed = False
        self.credentials = SITE_CREDENTIALS.get(site_config['name'], {})
        self.domain = site_config['base_url'].replace('https://', '')

    async def run_for_site(self, browser, playwright):
        self.browser = browser
        self.playwright = playwright
        
        if not self.credentials.get('username') or not self.credentials.get('password'):
            logger.error(f"‚ùå {self.site_config['name']} ÁöÑÁî®Êà∑ÂêçÊàñÂØÜÁ†ÅÊú™ËÆæÁΩÆÔºåË∑≥ËøáËØ•Á´ôÁÇπ")
            return False
            
        try:
            self.context = await BrowserManager.create_context(browser, self.site_config['name'])
            logger.success(f"‚úÖ {self.site_config['name']} ÊµèËßàÂô®ÁéØÂ¢ÉÂàùÂßãÂåñÂÆåÊàê")

            self.page = await self.context.new_page()
            self.page.set_default_timeout(PAGE_TIMEOUT)
            self.page.set_default_navigation_timeout(PAGE_TIMEOUT)

            while self.retry_count <= RETRY_TIMES:
                try:
                    # ========== ÁºìÂ≠ò‰ºòÂÖàÁöÑÊ†∏ÂøÉÊµÅÁ®ã ==========
                    logger.info(f"üîç ÂºÄÂßã {self.site_config['name']} ÁºìÂ≠ò‰ºòÂÖàÈ™åËØÅÊµÅÁ®ã")
                    
                    # 1. È¶ñÂÖàÂ∞ùËØï‰ΩøÁî®ÁºìÂ≠òÁõ¥Êé•ËÆøÈóÆ
                    cache_success = await self.try_cache_first_approach()
                    if cache_success:
                        logger.success(f"‚úÖ {self.site_config['name']} ÁºìÂ≠ò‰ºòÂÖàÊµÅÁ®ãÊàêÂäü")
                        self.is_logged_in = True
                        self.cf_passed = True
                    else:
                        # 2. ÁºìÂ≠òÂ§±Ë¥•ÔºåËøõË°åÂÆåÊï¥È™åËØÅÊµÅÁ®ã
                        logger.warning(f"‚ö†Ô∏è {self.site_config['name']} ÁºìÂ≠ò‰ºòÂÖàÊµÅÁ®ãÂ§±Ë¥•ÔºåÂºÄÂßãÂÆåÊï¥È™åËØÅ")
                        full_success = await self.full_verification_process()
                        self.is_logged_in = full_success
                    
                    # ========== Ê†∏ÂøÉÊµÅÁ®ãÁªìÊùü ==========

                    if self.is_logged_in:
                        logger.success(f"‚úÖ {self.site_config['name']} ÁôªÂΩïÊàêÂäüÔºåÂºÄÂßãÊâßË°åÂêéÁª≠‰ªªÂä°")
                        await self.save_all_caches()
                        await self.browse_topics()
                        await self.save_final_status(success=True)
                        break
                    else:
                        logger.error(f"‚ùå {self.site_config['name']} ÁôªÂΩïÂ§±Ë¥•")
                        
                        # Êô∫ËÉΩÈáçËØïÁ≠ñÁï•
                        if self.retry_count == 0:
                            if self.cf_passed and not self.is_logged_in:
                                logger.info(f"üîÑ {self.site_config['name']} CloudflareÈÄöËøá‰ΩÜÁôªÂΩïÂ§±Ë¥•ÔºåÂè™Ê∏ÖÈô§ÁôªÂΩïÁºìÂ≠ò")
                                await self.clear_login_caches_only()
                            else:
                                logger.info(f"üîÑ {self.site_config['name']} Ê∏ÖÈô§ÊâÄÊúâÁºìÂ≠òÂπ∂ÈáçËØï")
                                await self.clear_caches()
                        
                        self.retry_count += 1
                        if self.retry_count <= RETRY_TIMES:
                            wait_time = 10 + self.retry_count * 5
                            logger.warning(f"Â∞ÜÂú® {wait_time} ÁßíÂêéÈáçËØï ({self.retry_count}/{RETRY_TIMES})")
                            await asyncio.sleep(wait_time)
                        else:
                            logger.error(f"‚ùå {self.site_config['name']} ÊúÄÂ§ßÈáçËØïÊ¨°Êï∞ËÄóÂ∞ΩÔºåÁªàÊ≠¢ËÑöÊú¨")
                            await self.save_final_status(success=False)
                            return False

                except Exception as e:
                    logger.error(f"{self.site_config['name']} ÂΩìÂâçÂ∞ùËØïÂ§±Ë¥•: {str(e)}")
                    
                    if self.retry_count == 0:
                        logger.info(f"üîÑ {self.site_config['name']} Ê∏ÖÈô§ÁºìÂ≠òÂπ∂ÈáçËØï")
                        await self.clear_caches()
                    
                    self.retry_count += 1
                    if self.retry_count <= RETRY_TIMES:
                        wait_time = 10 + self.retry_count * 5
                        logger.warning(f"Â∞ÜÂú® {wait_time} ÁßíÂêéÈáçËØï ({self.retry_count}/{RETRY_TIMES})")
                        await asyncio.sleep(wait_time)
                    else:
                        logger.error(f"‚ùå {self.site_config['name']} ÊúÄÂ§ßÈáçËØïÊ¨°Êï∞ËÄóÂ∞ΩÔºåÁªàÊ≠¢ËÑöÊú¨")
                        await self.save_final_status(success=False)
                        return False

            return True

        except Exception as e:
            logger.critical(f"{self.site_config['name']} ËÑöÊú¨ÊâßË°åÂºÇÂ∏∏: {str(e)}")
            await self.save_final_status(success=False)
            traceback.print_exc()
            return False
        finally:
            await self.close_context()

    async def try_cache_first_approach(self):
        """ÁºìÂ≠ò‰ºòÂÖàÁöÑÈ™åËØÅÊµÅÁ®ã"""
        try:
            logger.info(f"üîÑ Â∞ùËØïÁºìÂ≠ò‰ºòÂÖàÊµÅÁ®ã")
            
            # 1. Ê£ÄÊü•ÊòØÂê¶ÊúâÊúâÊïàÁöÑCloudflareÁºìÂ≠ò
            cf_cache_valid = await UltimateCloudflareHandler.is_cached_cf_valid(self.site_config['name'])
            
            if cf_cache_valid:
                logger.info(f"‚úÖ Ê£ÄÊµãÂà∞ÊúâÊïàÁöÑCloudflareÁºìÂ≠òÔºåÂ∞ùËØïÁõ¥Êé•ËÆøÈóÆ")
                # Áõ¥Êé•ËÆøÈóÆ/latestÈ°µÈù¢
                await self.page.goto(self.site_config['latest_topics_url'], wait_until='networkidle', timeout=60000)
                await asyncio.sleep(5)
                
                # Ê£ÄÊü•È°µÈù¢Áä∂ÊÄÅ
                page_title = await self.page.title()
                if page_title == "ËØ∑Á®çÂÄô‚Ä¶" or "Checking" in page_title:
                    logger.warning("‚ö†Ô∏è È°µÈù¢‰ªçÁÑ∂Âç°‰ΩèÔºå‰ΩÜcookieÊúâÊïàÔºåÁªßÁª≠Ê£ÄÊü•ÁôªÂΩïÁä∂ÊÄÅ")
                
                # Ê£ÄÊü•ÁôªÂΩïÁä∂ÊÄÅ
                login_status = await self.enhanced_check_login_status()
                if login_status:
                    logger.success(f"‚úÖ ÁºìÂ≠ò‰ºòÂÖàÊµÅÁ®ãÊàêÂäü - Â∑≤ÁôªÂΩï")
                    return True
                else:
                    logger.warning(f"‚ö†Ô∏è CloudflareÁºìÂ≠òÊúâÊïà‰ΩÜÊú™ÁôªÂΩïÔºåÂ∞ùËØïÁôªÂΩï")
                    login_success = await self.optimized_login()
                    return login_success
            else:
                logger.info(f"üì≠ Êó†ÊúâÊïàCloudflareÁºìÂ≠ò")
                return False
                
        except Exception as e:
            logger.error(f"ÁºìÂ≠ò‰ºòÂÖàÊµÅÁ®ãÂºÇÂ∏∏: {str(e)}")
            return False

    async def full_verification_process(self):
        """ÂÆåÊï¥ÁöÑÈ™åËØÅÊµÅÁ®ã"""
        try:
            logger.info(f"üîÑ ÂºÄÂßãÂÆåÊï¥È™åËØÅÊµÅÁ®ã")
            
            # 1. ËøõË°åCloudflareÈ™åËØÅ
            await self.page.goto(self.site_config['base_url'], wait_until='networkidle', timeout=120000)
            
            self.cf_passed = await UltimateCloudflareHandler.handle_cloudflare(
                self.page, self.site_config, max_attempts=8, timeout=180
            )
            
            if self.cf_passed:
                logger.success(f"‚úÖ {self.site_config['name']} CloudflareÈ™åËØÅÈÄöËøá")
            else:
                logger.warning(f"‚ö†Ô∏è {self.site_config['name']} CloudflareÈ™åËØÅÊú™ÈÄöËøáÔºå‰ΩÜÁªßÁª≠Â∞ùËØïÁôªÂΩï")
            
            # 2. Ê£ÄÊü•ÁôªÂΩïÁä∂ÊÄÅ
            cached_login_success = await self.enhanced_check_login_status()
            if cached_login_success:
                logger.success(f"‚úÖ {self.site_config['name']} ÁºìÂ≠òÁôªÂΩïÊàêÂäü")
                return True
            else:
                logger.warning(f"‚ö†Ô∏è ÈúÄË¶ÅÈáçÊñ∞ÁôªÂΩï")
                login_success = await self.optimized_login()
                return login_success
                
        except Exception as e:
            logger.error(f"ÂÆåÊï¥È™åËØÅÊµÅÁ®ãÂºÇÂ∏∏: {str(e)}")
            return False

    async def enhanced_check_login_status(self):
        """Â¢ûÂº∫ÁâàÁôªÂΩïÁä∂ÊÄÅÊ£ÄÊü• - ÂåÖÂê´ÂÆåÊï¥ÁöÑÁî®Êà∑ÂêçÈ™åËØÅ"""
        try:
            current_url = self.page.url
            page_title = await self.page.title()
            logger.info(f"üîç Ê£ÄÊü•ÁôªÂΩïÁä∂ÊÄÅ - URL: {current_url}, Ê†áÈ¢ò: {page_title}")
            
            # Â¶ÇÊûúÈ°µÈù¢Âç°Âú®CloudflareÈ™åËØÅÔºå‰ΩÜcookieÊúâÊïàÔºåÂ∞ùËØïÁªïËøá
            if page_title == "ËØ∑Á®çÂÄô‚Ä¶":
                cf_valid = await UltimateCloudflareHandler.is_cf_clearance_valid(self.page.context, self.domain)
                if cf_valid:
                    logger.info("üîÑ È°µÈù¢Âç°‰Ωè‰ΩÜCloudflare cookieÊúâÊïàÔºåÂ∞ùËØïËÆøÈóÆ/latestÈ°µÈù¢")
                    await self.page.goto(self.site_config['latest_topics_url'], wait_until='networkidle', timeout=60000)
                    await asyncio.sleep(5)
                    # ÈáçÊñ∞Ê£ÄÊü•Áä∂ÊÄÅ
                    current_url = self.page.url
                    page_title = await self.page.title()
            
            # Ê£ÄÊü•Áî®Êà∑Áõ∏ÂÖ≥ÂÖÉÁ¥†ÔºàÁôªÂΩïÊàêÂäüÁöÑÊ†áÂøóÔºâ
            user_indicators = [
                '#current-user',
                '#toggle-current-user', 
                '.header-dropdown-toggle.current-user',
                'img.avatar',
                '.user-menu',
                '[data-user-menu]'
            ]
            
            user_element_found = False
            for selector in user_indicators:
                try:
                    user_elem = await self.page.query_selector(selector)
                    if user_elem and await user_elem.is_visible():
                        logger.success(f"‚úÖ Ê£ÄÊµãÂà∞Áî®Êà∑ÂÖÉÁ¥†: {selector}")
                        user_element_found = True
                        break
                except Exception:
                    continue
            
            if user_element_found:
                # üî• ÂÆåÊï¥ÁöÑÁî®Êà∑ÂêçÈ™åËØÅÊµÅÁ®ã
                username = self.credentials['username']
                username_verified = False
                
                # ÊñπÊ≥ï1: È°µÈù¢ÂÜÖÂÆπÊ£ÄÊü• - Âú®È°µÈù¢HTML‰∏≠ÊêúÁ¥¢Áî®Êà∑Âêç
                page_content = await self.page.content()
                if username.lower() in page_content.lower():
                    logger.success(f"‚úÖ Âú®È°µÈù¢ÂÜÖÂÆπ‰∏≠ÊâæÂà∞Áî®Êà∑Âêç: {username}")
                    username_verified = True
                    return True
                
                # ÊñπÊ≥ï2: Áî®Êà∑ËèúÂçïÁÇπÂáª - ÁÇπÂáªÁî®Êà∑Â§¥ÂÉè/ËèúÂçïÊü•ÁúãËØ¶ÁªÜ‰ø°ÊÅØ
                if not username_verified:
                    try:
                        logger.info("üîÑ Â∞ùËØïÁÇπÂáªÁî®Êà∑ËèúÂçïÈ™åËØÅÁî®Êà∑Âêç")
                        user_click_selectors = ['img.avatar', '.current-user', '[data-user-menu]', '.header-dropdown-toggle']
                        for selector in user_click_selectors:
                            user_elem = await self.page.query_selector(selector)
                            if user_elem and await user_elem.is_visible():
                                await user_elem.click()
                                await asyncio.sleep(2)
                                
                                # Âú®Â±ïÂºÄÁöÑËèúÂçï‰∏≠Êü•ÊâæÁî®Êà∑Âêç
                                user_menu_content = await self.page.content()
                                if username.lower() in user_menu_content.lower():
                                    logger.success(f"‚úÖ Âú®Áî®Êà∑ËèúÂçï‰∏≠ÊâæÂà∞Áî®Êà∑Âêç: {username}")
                                    username_verified = True
                                
                                # ÁÇπÂáªÂÖ∂‰ªñÂú∞ÊñπÂÖ≥Èó≠ËèúÂçï
                                await self.page.click('body')
                                await asyncio.sleep(1)
                                break
                    except Exception as e:
                        logger.debug(f"ÁÇπÂáªÁî®Êà∑ËèúÂçïÂ§±Ë¥•: {str(e)}")
                
                # ÊñπÊ≥ï3: ‰∏™‰∫∫ËµÑÊñôÈ°µÈù¢È™åËØÅ - ÂØºËà™Âà∞Áî®Êà∑‰∏™‰∫∫ËµÑÊñôÈ°µÈù¢Á°ÆËÆ§
                if not username_verified:
                    try:
                        logger.info("üîÑ Â∞ùËØïÂØºËà™Âà∞Áî®Êà∑‰∏™‰∫∫ËµÑÊñôÈ°µÈù¢È™åËØÅ")
                        profile_url = f"{self.site_config['base_url']}/u/{username}"
                        await self.page.goto(profile_url, wait_until='networkidle', timeout=30000)
                        await asyncio.sleep(3)
                        
                        profile_content = await self.page.content()
                        if username.lower() in profile_content.lower() or "‰∏™‰∫∫ËµÑÊñô" in await self.page.title():
                            logger.success(f"‚úÖ Âú®‰∏™‰∫∫ËµÑÊñôÈ°µÈù¢È™åËØÅÁî®Êà∑Âêç: {username}")
                            username_verified = True
                            
                        # ËøîÂõû‰πãÂâçÁöÑÈ°µÈù¢
                        await self.page.go_back(wait_until='networkidle')
                        await asyncio.sleep(2)
                    except Exception as e:
                        logger.debug(f"ÂØºËà™Âà∞‰∏™‰∫∫ËµÑÊñôÈ°µÈù¢Â§±Ë¥•: {str(e)}")
                
                # ÊñπÊ≥ï4: URLË∑ØÂæÑÊ£ÄÊü• - Ê£ÄÊü•URL‰∏≠ÊòØÂê¶ÂåÖÂê´Áî®Êà∑Áõ∏ÂÖ≥Ë∑ØÂæÑ
                if not username_verified and ('/u/' in current_url or '/users/' in current_url):
                    logger.success("‚úÖ Ê£ÄÊµãÂà∞Áî®Êà∑Áõ∏ÂÖ≥URLË∑ØÂæÑ")
                    username_verified = True
                
                # ÊúÄÁªàÂà§Êñ≠
                if username_verified:
                    return True
                else:
                    logger.warning(f"‚ö†Ô∏è Ê£ÄÊµãÂà∞Áî®Êà∑ÂÖÉÁ¥†‰ΩÜÊó†Ê≥ïÈ™åËØÅÁî®Êà∑Âêç {username}ÔºåÈªòËÆ§ËÆ§‰∏∫Â∑≤ÁôªÂΩï")
                    return True
            
            # Ê£ÄÊü•ÁôªÂΩïÊåâÈíÆÔºàÊú™ÁôªÂΩïÁöÑÊ†áÂøóÔºâ
            login_buttons = [
                '.login-button',
                'button:has-text("ÁôªÂΩï")',
                'button:has-text("Log In")',
                '.btn.btn-icon-text.login-button'
            ]
            
            for selector in login_buttons:
                try:
                    login_btn = await self.page.query_selector(selector)
                    if login_btn and await login_btn.is_visible():
                        logger.warning(f"‚ùå Ê£ÄÊµãÂà∞ÁôªÂΩïÊåâÈíÆ: {selector}")
                        return False
                except Exception:
                    continue
            
            # Â¶ÇÊûúÊó†Ê≥ïÁ°ÆÂÆöÁä∂ÊÄÅÔºå‰øùÂ≠òË∞ÉËØï‰ø°ÊÅØ
            page_content = await self.page.content()
            if "ËØ∑Á®çÂÄô" not in page_title and "Checking" not in page_title:
                # È°µÈù¢ÂèØËÉΩÂ∑≤Ê≠£Â∏∏Âä†ËΩΩ‰ΩÜÊ≤°ÊúâÊòéÊòæÁöÑÁôªÂΩïÁä∂ÊÄÅÊåáÁ§∫
                username = self.credentials['username']
                if username.lower() in page_content.lower():
                    logger.success(f"‚úÖ Âú®È°µÈù¢ÂÜÖÂÆπ‰∏≠ÊâæÂà∞Áî®Êà∑Âêç: {username}")
                    return True
                
                # Ê£ÄÊü•ÊòØÂê¶ÊúâÊ≠£Â∏∏ÁöÑÂÜÖÂÆπ
                if len(page_content) > 1000:
                    logger.success("‚úÖ È°µÈù¢ÊòæÁ§∫Ê≠£Â∏∏ÂÜÖÂÆπÔºåÂèØËÉΩÂ∑≤ÁôªÂΩï")
                    return True
            
            logger.warning(f"‚ö†Ô∏è ÁôªÂΩïÁä∂ÊÄÅ‰∏çÁ°ÆÂÆöÔºåÈªòËÆ§ËÆ§‰∏∫Êú™ÁôªÂΩï„ÄÇÈ°µÈù¢Ê†áÈ¢ò: {page_title}")
            return False
            
        except Exception as e:
            logger.warning(f"{self.site_config['name']} Ê£ÄÊü•ÁôªÂΩïÁä∂ÊÄÅÊó∂Âá∫Èîô: {str(e)}")
            return False

    async def optimized_login(self):
        """‰ºòÂåñÁöÑÁôªÂΩïÊµÅÁ®ã"""
        try:
            logger.info(f"üîê ÂºÄÂßã {self.site_config['name']} ‰ºòÂåñÁôªÂΩïÊµÅÁ®ã")
            
            # Ê∏ÖÈô§ÂèØËÉΩÁöÑÊóß‰ºöËØù
            await self.page.context.clear_cookies()
            
            # ÂØºËà™Âà∞ÁôªÂΩïÈ°µÈù¢
            logger.info(f"üîÑ ÂØºËà™Âà∞ÁôªÂΩïÈ°µÈù¢: {self.site_config['login_url']}")
            await self.page.goto(self.site_config['login_url'], wait_until='networkidle', timeout=90000)
            
            # Á≠âÂæÖÈ°µÈù¢Á®≥ÂÆö
            await asyncio.sleep(5)
            
            # Á≠âÂæÖÁôªÂΩïË°®Âçï
            form_loaded = False
            for i in range(5):
                try:
                    await self.page.wait_for_selector('#login-account-name', timeout=10000)
                    await self.page.wait_for_selector('#login-account-password', timeout=10000)
                    form_loaded = True
                    break
                except:
                    logger.warning(f"ÁôªÂΩïË°®ÂçïÂä†ËΩΩÂ§±Ë¥•ÔºåÈáçËØï {i+1}/5")
                    await asyncio.sleep(3)
            
            if not form_loaded:
                logger.error("‚ùå ÁôªÂΩïË°®ÂçïÂä†ËΩΩË∂ÖÊó∂")
                return False
            
            # Â°´ÂÜôÁôªÂΩï‰ø°ÊÅØ
            username = self.credentials['username']
            password = self.credentials['password']
            
            logger.info("üìù Â°´ÂÜôÁôªÂΩï‰ø°ÊÅØ")
            await self.page.fill('#login-account-name', username)
            await self.page.fill('#login-account-password', password)
            
            await asyncio.sleep(2)
            
            # ÁÇπÂáªÁôªÂΩïÊåâÈíÆ
            login_button_selectors = ['#login-button', 'button[type="submit"]', 'input[type="submit"]']
            clicked = False
            for selector in login_button_selectors:
                try:
                    login_btn = await self.page.query_selector(selector)
                    if login_btn and await login_btn.is_visible():
                        await login_btn.click()
                        clicked = True
                        logger.info(f"‚úÖ ÁÇπÂáªÁôªÂΩïÊåâÈíÆ: {selector}")
                        break
                except:
                    continue
            
            if not clicked:
                logger.error("‚ùå Êâæ‰∏çÂà∞ÂèØÁÇπÂáªÁöÑÁôªÂΩïÊåâÈíÆ")
                return False
            
            # Á≠âÂæÖÁôªÂΩïÁªìÊûú
            logger.info("‚è≥ Á≠âÂæÖÁôªÂΩïÁªìÊûú...")
            await asyncio.sleep(20)
            
            # Ê£ÄÊü•ÁôªÂΩïÂêéÁöÑÈ°µÈù¢Áä∂ÊÄÅ
            current_url = self.page.url
            logger.info(f"ÁôªÂΩïÂêéURL: {current_url}")
            
            if current_url != self.site_config['login_url']:
                logger.info("‚úÖ È°µÈù¢Â∑≤Ë∑≥ËΩ¨ÔºåÂèØËÉΩÁôªÂΩïÊàêÂäü")
                await asyncio.sleep(5)
                return await self.enhanced_check_login_status()
            
            # Ê£ÄÊü•ÈîôËØØÊ∂àÊÅØ
            error_selectors = ['.alert-error', '.error', '.flash-error', '.alert.alert-error']
            for selector in error_selectors:
                error_elem = await self.page.query_selector(selector)
                if error_elem:
                    error_text = await error_elem.inner_text()
                    logger.error(f"‚ùå ÁôªÂΩïÈîôËØØ: {error_text}")
                    return False
            
            # Â¶ÇÊûúËøòÂú®ÁôªÂΩïÈ°µÈù¢‰ΩÜÊ≤°ÊúâÈîôËØØÔºåÂ∞ùËØïÂº∫Âà∂Âà∑Êñ∞
            logger.warning("‚ö†Ô∏è ‰ªçÂú®ÁôªÂΩïÈ°µÈù¢Ôºå‰ΩÜÊ≤°ÊúâÊòéÊòæÈîôËØØÔºåÂ∞ùËØïÂº∫Âà∂Âà∑Êñ∞Âπ∂Ê£ÄÊü•Áä∂ÊÄÅ")
            await self.page.goto(self.site_config['base_url'], wait_until='networkidle', timeout=60000)
            await asyncio.sleep(5)
            
            return await self.enhanced_check_login_status()
                
        except Exception as e:
            logger.error(f"{self.site_config['name']} ÁôªÂΩïËøáÁ®ãÂºÇÂ∏∏: {e}")
            return False

    async def clear_caches(self):
        try:
            cache_files = [
                self.site_config['cf_cookies_file'],
                self.site_config['browser_state_file'],
                self.site_config['session_file'],
                self.site_config['final_status_file']
            ]
            
            for cache_file in cache_files:
                path = EnhancedCacheManager.get_cache_path(cache_file)
                if os.path.exists(path):
                    os.remove(path)
                    logger.info(f"üóëÔ∏è Â∑≤Ê∏ÖÈô§ÁºìÂ≠ò: {cache_file}")
            
            self.session_data = {}
            logger.info(f"‚úÖ {self.site_config['name']} ÊâÄÊúâÁºìÂ≠òÂ∑≤Ê∏ÖÈô§")
            
        except Exception as e:
            logger.error(f"Ê∏ÖÈô§ÁºìÂ≠òÂ§±Ë¥•: {str(e)}")

    async def clear_login_caches_only(self):
        """Âè™Ê∏ÖÈô§ÁôªÂΩïÁõ∏ÂÖ≥ÁºìÂ≠òÔºå‰øùÁïôCloudflare cookies"""
        try:
            cache_files = [
                self.site_config['browser_state_file'],
                self.site_config['session_file'],
                self.site_config['final_status_file']
            ]
            
            for cache_file in cache_files:
                path = EnhancedCacheManager.get_cache_path(cache_file)
                if os.path.exists(path):
                    os.remove(path)
                    logger.info(f"üóëÔ∏è Â∑≤Ê∏ÖÈô§ÁºìÂ≠ò: {cache_file}")
            
            self.session_data = {}
            logger.info(f"‚úÖ {self.site_config['name']} ÁôªÂΩïÁºìÂ≠òÂ∑≤Ê∏ÖÈô§Ôºå‰øùÁïôCloudflare cookies")
            
        except Exception as e:
            logger.error(f"Ê∏ÖÈô§ÁôªÂΩïÁºìÂ≠òÂ§±Ë¥•: {str(e)}")

    async def save_all_caches(self):
        try:
            await self.save_cf_cookies()
            
            if self.context:
                state = await self.context.storage_state()
                EnhancedCacheManager.save_browser_state(state, self.site_config['name'])
            
            self.session_data.update({
                'last_success': datetime.now().isoformat(),
                'login_status': 'success',
                'retry_count': self.retry_count,
                'cf_passed': self.cf_passed,
            })
            EnhancedCacheManager.save_session_data(self.session_data, self.site_config['name'])
            
            logger.info(f"‚úÖ {self.site_config['name']} ÊâÄÊúâÁºìÂ≠òÂ∑≤‰øùÂ≠ò")
        except Exception as e:
            logger.error(f"{self.site_config['name']} ‰øùÂ≠òÁºìÂ≠òÂ§±Ë¥•: {str(e)}")

    async def save_final_status(self, success=False):
        final_status = {
            'success': success,
            'timestamp': datetime.now().isoformat(),
            'retry_count': self.retry_count,
            'login_status': 'success' if success else 'failed',
            'cf_passed': self.cf_passed,
            'message': '‰ªªÂä°ÊâßË°åÂÆåÊàê' if success else '‰ªªÂä°ÊâßË°åÂ§±Ë¥•',
            'session_data': self.session_data
        }
        EnhancedCacheManager.save_final_status(final_status, self.site_config['name'])

    async def save_cf_cookies(self):
        try:
            all_cookies = await self.context.cookies()
            target_domain = self.site_config['base_url'].replace('https://', '')
            cf_cookies = [
                cookie for cookie in all_cookies 
                if cookie.get('domain', '').endswith(target_domain) and 
                   (cookie.get('name') == 'cf_clearance' or 'cloudflare' in cookie.get('name', ''))
            ]
            
            if cf_cookies:
                EnhancedCacheManager.save_cf_cookies(cf_cookies, self.site_config['name'])
                logger.info(f"‚úÖ {self.site_config['name']} Cloudflare Cookies Â∑≤‰øùÂ≠ò: {len(cf_cookies)} ‰∏™")
                
        except Exception as e:
            logger.error(f"‚ùå ‰øùÂ≠ò {self.site_config['name']} Cloudflare cookies Â§±Ë¥•: {e}")

    async def close_context(self):
        try:
            if self.context:
                state = await self.context.storage_state()
                EnhancedCacheManager.save_browser_state(state, self.site_config['name'])
                await self.context.close()
                logger.info(f"‚úÖ {self.site_config['name']} ÊµèËßàÂô®‰∏ä‰∏ãÊñáÂ∑≤ÂÖ≥Èó≠")
                
        except Exception as e:
            logger.debug(f"{self.site_config['name']} ÂÖ≥Èó≠ÊµèËßàÂô®‰∏ä‰∏ãÊñáÂºÇÂ∏∏: {str(e)}")

    async def browse_topics(self):
        try:
            logger.info(f"üìñ ÂºÄÂßã {self.site_config['name']} ‰∏ªÈ¢òÊµèËßà")
            
            browse_history = self.session_data.get('browse_history', [])
            
            logger.info(f"üîÑ ÂØºËà™Âà∞ÊúÄÊñ∞‰∏ªÈ¢òÈ°µÈù¢: {self.site_config['latest_topics_url']}")
            await self.page.goto(self.site_config['latest_topics_url'], timeout=60000, wait_until='networkidle')
            
            # Ê£ÄÊü•È°µÈù¢ÂÜÖÂÆπ
            page_content = await self.page.content()
            logger.info(f"üìÑ È°µÈù¢ÂÜÖÂÆπÈïøÂ∫¶: {len(page_content)} Â≠óÁ¨¶")
            
            # Â∞ùËØïÂ§öÁßçÈÄâÊã©Âô®
            topic_selectors = ['a.title', '.title a', 'a.topic-title', '.topic-list-item a', 'tr.topic-list-item a.title']
            topic_links = []
            
            for selector in topic_selectors:
                links = await self.page.query_selector_all(selector)
                if links:
                    logger.info(f"‚úÖ ‰ΩøÁî®ÈÄâÊã©Âô® '{selector}' ÊâæÂà∞ {len(links)} ‰∏™‰∏ªÈ¢òÈìæÊé•")
                    topic_links = links
                    break
                else:
                    logger.info(f"‚ùå ÈÄâÊã©Âô® '{selector}' Êú™ÊâæÂà∞‰∏ªÈ¢òÈìæÊé•")
            
            if not topic_links:
                logger.warning(f"{self.site_config['name']} Êú™ÊâæÂà∞‰∏ªÈ¢òÈìæÊé•")
                return
            
            browse_count = min(random.randint(9, 15), len(topic_links))
            selected_topics = random.sample(topic_links, browse_count)
            
            logger.info(f"üìö {self.site_config['name']} ËÆ°ÂàíÊµèËßà {browse_count} ‰∏™‰∏ªÈ¢ò")
            
            success_count = 0
            for idx, topic in enumerate(selected_topics, 1):
                success = await self.browse_single_topic(topic, idx, browse_count, browse_history)
                if success:
                    success_count += 1
                    
                if idx < browse_count:
                    await asyncio.sleep(random.uniform(5, 10))
            
            self.session_data['browse_history'] = browse_history[-50:]
            self.session_data['last_browse'] = datetime.now().isoformat()
            self.session_data['total_browsed'] = self.session_data.get('total_browsed', 0) + success_count
            
            logger.success(f"‚úÖ {self.site_config['name']} ‰∏ªÈ¢òÊµèËßàÂÆåÊàê: ÊàêÂäü {success_count} ‰∏™‰∏ªÈ¢ò")

        except Exception as e:
            logger.error(f"{self.site_config['name']} ‰∏ªÈ¢òÊµèËßàÊµÅÁ®ãÂ§±Ë¥•: {str(e)}")
            traceback.print_exc()

    async def browse_single_topic(self, topic, topic_idx, total_topics, browse_history):
        try:
            title = (await topic.text_content() or "").strip()[:60]
            href = await topic.get_attribute('href')
            
            if not href:
                return False
            
            topic_url = f"{self.site_config['base_url']}{href}" if href.startswith('/') else href
            
            if href in browse_history:
                return False
            
            logger.info(f"üåê {self.site_config['name']} ÊµèËßà‰∏ªÈ¢ò {topic_idx}/{total_topics}: {title}")
            
            tab = await self.context.new_page()
            try:
                await tab.goto(topic_url, timeout=45000, wait_until='domcontentloaded')
                await asyncio.sleep(random.uniform(20, 40))
                browse_history.append(href)
                return True
                
            except Exception as e:
                logger.error(f"{self.site_config['name']} ÊµèËßàÂçï‰∏™‰∏ªÈ¢òÂ§±Ë¥•: {str(e)}")
                return False
            finally:
                await tab.close()
                
        except Exception as e:
            logger.error(f"{self.site_config['name']} ÂáÜÂ§áÊµèËßà‰∏ªÈ¢òÂ§±Ë¥•: {str(e)}")
            return False

# ======================== ‰∏ªÊâßË°åÂáΩÊï∞ ========================
async def main():
    logger.info("üöÄ LinuxDoÂ§öÁ´ôÁÇπËá™Âä®ÂåñËÑöÊú¨ÂêØÂä®")
    
    browser, playwright = await BrowserManager.init_browser()
    
    try:
        results = []
        
        for site_config in SITES:
            logger.info(f"üéØ ÂºÄÂßãÂ§ÑÁêÜÁ´ôÁÇπ: {site_config['name']}")
            
            automator = LinuxDoAutomator(site_config)
            success = await automator.run_for_site(browser, playwright)
            
            results.append({
                'site': site_config['name'],
                'success': success,
                'login_status': automator.is_logged_in,
                'cf_passed': automator.cf_passed,
                'retry_count': automator.retry_count
            })
            
            # Á´ôÁÇπÈó¥Âª∂Ëøü
            if site_config != SITES[-1]:
                delay = random.uniform(10, 20)
                logger.info(f"‚è≥ Á´ôÁÇπÈó¥Âª∂Ëøü {delay:.1f} Áßí")
                await asyncio.sleep(delay)
        
        # ËæìÂá∫ÊúÄÁªàÁªìÊûú
        logger.info("üìä ÊâÄÊúâÁ´ôÁÇπÊâßË°åÁªìÊûú:")
        table_data = []
        for result in results:
            status_icon = "‚úÖ" if result['success'] else "‚ùå"
            login_status = "Â∑≤ÁôªÂΩï" if result['login_status'] else "Êú™ÁôªÂΩï"
            cf_status = "ÈÄöËøá" if result['cf_passed'] else "Â§±Ë¥•"
            table_data.append([
                result['site'], 
                status_icon, 
                login_status, 
                cf_status, 
                result['retry_count']
            ])
        
        print(tabulate(table_data, 
                      headers=['Á´ôÁÇπ', 'Áä∂ÊÄÅ', 'ÁôªÂΩï', 'Cloudflare', 'ÈáçËØïÊ¨°Êï∞'],
                      tablefmt='grid'))
        
        success_count = sum(1 for r in results if r['success'])
        logger.success(f"üéâ ËÑöÊú¨ÊâßË°åÂÆåÊàê: {success_count}/{len(results)} ‰∏™Á´ôÁÇπÊàêÂäü")
        
    except Exception as e:
        logger.critical(f"üí• ‰∏ªÊâßË°åÊµÅÁ®ãÂºÇÂ∏∏: {str(e)}")
        traceback.print_exc()
    finally:
        await browser.close()
        await playwright.stop()
        logger.info("üîö ÊµèËßàÂô®Â∑≤ÂÖ≥Èó≠ÔºåËÑöÊú¨ÁªìÊùü")

if __name__ == "__main__":
    asyncio.run(main())
