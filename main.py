import os
import sys
import time
import random
import asyncio
import json
import math
import traceback
from datetime import datetime, timedelta
from urllib.parse import urljoin
from io import BytesIO
from PIL import Image
from playwright.async_api import async_playwright, MouseButton
from loguru import logger
from tenacity import retry, stop_after_attempt, wait_fixed, retry_if_exception_type
from tabulate import tabulate

# ======================== ÈÖçÁΩÆÂ∏∏Èáè ========================
SITE_CREDENTIALS = {
    'linux_do': {
        'username': os.getenv('LINUXDO_USERNAME'),
        'password': os.getenv('LINUXDO_PASSWORD')
    },
    'idcflare': {
        'username': os.getenv('IDCFLARE_USERNAME'),
        'password': os.getenv('IDCFLARE_PASSWORD')
    }
}

HEADLESS_MODE = os.getenv('HEADLESS', 'true').lower() == 'true'

SITES = [
    {
        'name': 'linux_do',
        'base_url': 'https://linux.do',
        'login_url': 'https://linux.do/login',
        'latest_topics_url': 'https://linux.do/latest',
        'cf_cookies_file': "cf_cookies_linux_do.json",
        'browser_state_file': "browser_state_linux_do.json", 
        'session_file': "session_data_linux_do.json",
        'final_status_file': "final_status_linux_do.json"
    },
    {
        'name': 'idcflare',
        'base_url': 'https://idcflare.com',
        'login_url': 'https://idcflare.com/login',
        'latest_topics_url': 'https://idcflare.com/latest',
        'cf_cookies_file': "cf_cookies_idcflare.json",
        'browser_state_file': "browser_state_idcflare.json",
        'session_file': "session_data_idcflare.json", 
        'final_status_file': "final_status_idcflare.json"
    }
]

PAGE_TIMEOUT = 180000
RETRY_TIMES = 2

# ======================== ÂèçÊ£ÄÊµãÈÖçÁΩÆ ========================
USER_AGENTS = [
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36',
    'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36',
    'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36',
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36',
    'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36',
]

VIEWPORT_SIZES = [
    {'width': 1920, 'height': 1080},
    {'width': 1366, 'height': 768},
    {'width': 1536, 'height': 864},
    {'width': 1440, 'height': 900},
    {'width': 1280, 'height': 720},
]

# ======================== ÁªàÊûÅÁºìÂ≠òÁÆ°ÁêÜÂô® ========================
class UltimateCacheManager:
    @staticmethod
    def get_file_age_hours(file_path):
        """Ëé∑ÂèñÊñá‰ª∂Âπ¥ÈæÑÔºàÂ∞èÊó∂Ôºâ"""
        if not os.path.exists(file_path):
            return None
        file_mtime = os.path.getmtime(file_path)
        current_time = time.time()
        age_hours = (current_time - file_mtime) / 3600
        return age_hours

    @staticmethod
    def load_cache(file_name):
        if os.path.exists(file_name):
            try:
                with open(file_name, "r", encoding='utf-8') as f:
                    data = json.load(f)
                
                # ‰ΩøÁî®Êñá‰ª∂Á≥ªÁªüÊó∂Èó¥ËÄå‰∏çÊòØÁºìÂ≠òÂÜÖÈÉ®Êó∂Èó¥Êà≥
                age_hours = UltimateCacheManager.get_file_age_hours(file_name)
                if age_hours is not None:
                    age_status = "ÂÖ®Êñ∞" if age_hours < 0.1 else "ËæÉÊñ∞" if age_hours < 6 else "ËæÉÊóß"
                    logger.info(f"üì¶ Âä†ËΩΩÁºìÂ≠ò {file_name} (Âπ¥ÈæÑ: {age_hours:.3f}Â∞èÊó∂, {age_status})")
                
                # ËøîÂõûÊï∞ÊçÆÈÉ®ÂàÜ
                return data.get('data', data)
            except Exception as e:
                logger.warning(f"ÁºìÂ≠òÂä†ËΩΩÂ§±Ë¥• {file_name}: {str(e)}")
        else:
            logger.info(f"üì≠ ÁºìÂ≠òÊñá‰ª∂‰∏çÂ≠òÂú®: {file_name}")
        return None

    @staticmethod
    def save_cache(data, file_name):
        try:
            # Âº∫Âà∂Êõ¥Êñ∞Êñá‰ª∂Êó∂Èó¥Êà≥ÔºåÁ°Æ‰øùË¶ÜÁõñÊóßÁºìÂ≠ò
            data_to_save = {
                'data': data,
                'cache_timestamp': datetime.now().isoformat(),
                'cache_version': '4.1',  # ÁâàÊú¨Êõ¥Êñ∞
                'file_created': time.time(),
                'run_id': os.getenv('GITHUB_RUN_ID', 'local')
            }
            
            with open(file_name, "w", encoding='utf-8') as f:
                json.dump(data_to_save, f, ensure_ascii=False, indent=2)
            
            # Âº∫Âà∂Êõ¥Êñ∞Êñá‰ª∂Á≥ªÁªüÊó∂Èó¥Êà≥ÔºåÁ°Æ‰øùÁºìÂ≠òË¢´Ê≠£Á°ÆË¶ÜÁõñ
            current_time = time.time()
            os.utime(file_name, (current_time, current_time))
            
            # È™åËØÅÊñá‰ª∂Êó∂Èó¥Êà≥ÊòØÂê¶Êõ¥Êñ∞
            new_age = UltimateCacheManager.get_file_age_hours(file_name)
            file_size = os.path.getsize(file_name)
            logger.info(f"üíæ ÁºìÂ≠òÂ∑≤‰øùÂ≠òÂà∞ {file_name} (Êñ∞Âπ¥ÈæÑ: {new_age:.3f}Â∞èÊó∂, Â§ßÂ∞è: {file_size} Â≠óËäÇ)")
            return True
        except Exception as e:
            logger.error(f"ÁºìÂ≠ò‰øùÂ≠òÂ§±Ë¥• {file_name}: {str(e)}")
            return False

    # Á´ôÁÇπÁâπÂÆöÁöÑÁºìÂ≠òÊñπÊ≥ï
    @staticmethod
    def load_site_cache(site_name, cache_type):
        file_name = f"{cache_type}_{site_name}.json"
        return UltimateCacheManager.load_cache(file_name)

    @staticmethod
    def save_site_cache(data, site_name, cache_type):
        file_name = f"{cache_type}_{site_name}.json"
        return UltimateCacheManager.save_cache(data, file_name)

# ======================== CloudflareÂ§ÑÁêÜÂô® ========================
class CloudflareHandler:
    @staticmethod
    async def handle_cloudflare(page, site_config, max_attempts=8, timeout=180):
        domain = site_config['base_url'].replace('https://', '')
        start_time = time.time()
        logger.info(f"üõ°Ô∏è ÂºÄÂßãÂ§ÑÁêÜ {domain} CloudflareÈ™åËØÅ")
        
        # Ê£ÄÊü•ÁºìÂ≠ò‰∏≠ÁöÑCloudflare cookies
        cached_cf_valid = await CloudflareHandler.is_cached_cf_valid(site_config['name'])
        if cached_cf_valid:
            logger.success(f"‚úÖ Ê£ÄÊµãÂà∞ÊúâÊïàÁöÑÁºìÂ≠òCloudflare cookieÔºåÂ∞ùËØïÁõ¥Êé•ÁªïËøáÈ™åËØÅ")
            try:
                await page.goto(site_config['latest_topics_url'], wait_until='networkidle', timeout=60000)
                await asyncio.sleep(5)
                
                page_title = await page.title()
                if page_title != "ËØ∑Á®çÂÄô‚Ä¶" and "Checking" not in page_title:
                    logger.success("‚úÖ ‰ΩøÁî®ÁºìÂ≠òÊàêÂäüÁªïËøáCloudflareÈ™åËØÅ")
                    return True
            except Exception as e:
                logger.warning(f"‰ΩøÁî®ÁºìÂ≠òÁªïËøáÂ§±Ë¥•: {str(e)}")
        
        # ÂÆåÊï¥È™åËØÅÊµÅÁ®ã
        logger.info(f"üîÑ ÂºÄÂßãÂÆåÊï¥CloudflareÈ™åËØÅÊµÅÁ®ã")
        for attempt in range(max_attempts):
            try:
                current_url = page.url
                page_title = await page.title()
                
                # Ê£ÄÊü•ÊòØÂê¶ÊúâÊúâÊïàÁöÑcf_clearance cookie
                cf_valid = await CloudflareHandler.is_cf_clearance_valid(page.context, domain)
                
                if cf_valid:
                    logger.success(f"‚úÖ Ê£ÄÊµãÂà∞ÊúâÊïàÁöÑ cf_clearance cookie")
                    
                    # Â¶ÇÊûúcookieÊúâÊïà‰ΩÜÈ°µÈù¢Âç°‰ΩèÔºåÂ∞ùËØïÂº∫Âà∂Ëß£ÂÜ≥ÊñπÊ°à
                    if page_title == "ËØ∑Á®çÂÄô‚Ä¶" or "Checking your browser" in await page.content():
                        logger.info("üîÑ CookieÊúâÊïà‰ΩÜÈ°µÈù¢Âç°‰ΩèÔºåÂ∞ùËØïÂº∫Âà∂Ëß£ÂÜ≥ÊñπÊ°à")
                        try:
                            await page.goto(site_config['latest_topics_url'], wait_until='networkidle', timeout=60000)
                            await asyncio.sleep(5)
                            
                            new_title = await page.title()
                            if new_title != "ËØ∑Á®çÂÄô‚Ä¶":
                                logger.success("‚úÖ ÈÄöËøáËÆøÈóÆ/latestÈ°µÈù¢ÊàêÂäüÁªïËøáÂç°‰ΩèÁöÑ‰∏ªÈ°µ")
                                return True
                        except Exception:
                            logger.warning("ËÆøÈóÆ/latestÈ°µÈù¢Â§±Ë¥•")
                    
                    else:
                        logger.success(f"‚úÖ {domain} È°µÈù¢Â∑≤Ê≠£Â∏∏Âä†ËΩΩ")
                        return True
                else:
                    # Ê£ÄÊü•È°µÈù¢ÊòØÂê¶Â∑≤ÁªèÊ≠£Â∏∏Âä†ËΩΩ
                    if page_title != "ËØ∑Á®çÂÄô‚Ä¶" and "Checking" not in page_title:
                        logger.success(f"‚úÖ {domain} È°µÈù¢Â∑≤Ê≠£Â∏∏Âä†ËΩΩÔºåCloudflareÈ™åËØÅÈÄöËøá")
                        return True
                    
                    # Á≠âÂæÖÈ™åËØÅ
                    wait_time = random.uniform(8, 15)
                    logger.info(f"‚è≥ Á≠âÂæÖCloudflareÈ™åËØÅÂÆåÊàê ({wait_time:.1f}Áßí) - Â∞ùËØï {attempt + 1}/{max_attempts}")
                    await asyncio.sleep(wait_time)
                    
                    # Ê£ÄÊü•cookieÊòØÂê¶ÂèòÂæóÊúâÊïà
                    cf_valid_after_wait = await CloudflareHandler.is_cf_clearance_valid(page.context, domain)
                    if cf_valid_after_wait:
                        logger.success(f"‚úÖ Á≠âÂæÖÂêéÊ£ÄÊµãÂà∞ÊúâÊïàÁöÑ cf_clearance cookieÔºåÊèêÂâçÁªìÊùüÈ™åËØÅ")
                        return True
                    
                    # ÂÅ∂Â∞îÂà∑Êñ∞È°µÈù¢
                    if attempt % 3 == 0:
                        logger.info("üîÑ Âà∑Êñ∞È°µÈù¢")
                        await page.reload(wait_until='networkidle', timeout=60000)
                        await asyncio.sleep(3)
                
                # Ê£ÄÊü•Ë∂ÖÊó∂
                if time.time() - start_time > timeout:
                    logger.warning(f"‚ö†Ô∏è {domain} CloudflareÂ§ÑÁêÜË∂ÖÊó∂")
                    break
                    
            except Exception as e:
                logger.error(f"{domain} CloudflareÂ§ÑÁêÜÂºÇÂ∏∏ (Â∞ùËØï {attempt + 1}): {str(e)}")
                await asyncio.sleep(10)
        
        # ÊúÄÁªàÊ£ÄÊü•
        final_cf_valid = await CloudflareHandler.is_cf_clearance_valid(page.context, domain)
        page_title = await page.title()
        
        if final_cf_valid or (page_title != "ËØ∑Á®çÂÄô‚Ä¶" and "Checking" not in page_title):
            logger.success(f"‚úÖ ÊúÄÁªàÈ™åËØÅ: {domain} CloudflareÈ™åËØÅÈÄöËøá")
            return True
        else:
            logger.warning(f"‚ö†Ô∏è ÊúÄÁªàÈ™åËØÅ: {domain} CloudflareÈ™åËØÅÊú™ÂÆåÂÖ®ÈÄöËøáÔºå‰ΩÜÁªßÁª≠ÂêéÁª≠ÊµÅÁ®ã")
            return True

    @staticmethod
    async def is_cached_cf_valid(site_name):
        try:
            cf_cookies = UltimateCacheManager.load_site_cache(site_name, 'cf_cookies')
            if not cf_cookies:
                return False
            
            # Ê£ÄÊü•ÊòØÂê¶Êúâcf_clearance cookie‰∏îÊú™ËøáÊúü
            for cookie in cf_cookies:
                if cookie.get('name') == 'cf_clearance':
                    expires = cookie.get('expires', 0)
                    if expires == -1 or expires > time.time():
                        logger.info(f"‚úÖ {site_name} ÁºìÂ≠ò‰∏≠ÁöÑCloudflare cookieÊúâÊïà")
                        return True
            return False
        except Exception as e:
            logger.warning(f"Ê£ÄÊü•ÁºìÂ≠òcookieÂ§±Ë¥•: {str(e)}")
            return False

    @staticmethod
    async def is_cf_clearance_valid(context, domain):
        try:
            cookies = await context.cookies()
            for cookie in cookies:
                if cookie.get('name') == 'cf_clearance' and domain in cookie.get('domain', ''):
                    expires = cookie.get('expires', 0)
                    if expires == -1 or expires > time.time():
                        return True
            return False
        except Exception:
            return False

# ======================== ÊµèËßàÂô®ÁÆ°ÁêÜÂô® ========================
class BrowserManager:
    @staticmethod
    async def init_browser():
        playwright = await async_playwright().start()
        
        user_agent = random.choice(USER_AGENTS)
        viewport = random.choice(VIEWPORT_SIZES)
        
        logger.info(f"‰ΩøÁî® User-Agent: {user_agent[:50]}...")
        logger.info(f"‰ΩøÁî®ËßÜÂè£Â§ßÂ∞è: {viewport}")

        browser_args = [
            '--no-sandbox',
            '--disable-dev-shm-usage',
            '--disable-blink-features=AutomationControlled',
            f'--window-size={viewport["width"]},{viewport["height"]}',
            '--lang=zh-CN,zh;q=0.9,en;q=0.8',
            '--disable-features=VizDisplayCompositor',
            '--disable-background-timer-throttling',
            '--disable-backgrounding-occluded-windows',
            '--disable-renderer-backgrounding',
        ]

        browser = await playwright.chromium.launch(
            headless=HEADLESS_MODE,
            args=browser_args
        )
        
        return browser, playwright

    @staticmethod
    async def create_context(browser, site_name):
        has_browser_state = UltimateCacheManager.load_site_cache(site_name, 'browser_state') is not None
        has_cf_cookies = UltimateCacheManager.load_site_cache(site_name, 'cf_cookies') is not None
        
        logger.info(f"üîç {site_name} ÁºìÂ≠òÁä∂ÊÄÅ - ÊµèËßàÂô®Áä∂ÊÄÅ: {'‚úÖ' if has_browser_state else '‚ùå'}, Cloudflare Cookies: {'‚úÖ' if has_cf_cookies else '‚ùå'}")
        
        storage_state = UltimateCacheManager.load_site_cache(site_name, 'browser_state')
        
        user_agent = random.choice(USER_AGENTS)
        viewport = random.choice(VIEWPORT_SIZES)
        
        context = await browser.new_context(
            viewport=viewport,
            user_agent=user_agent,
            locale='zh-CN',
            timezone_id='Asia/Shanghai',
            storage_state=storage_state,
            ignore_https_errors=True,
            java_script_enabled=True,
        )
        
        await BrowserManager.load_caches_into_context(context, site_name)
        await context.add_init_script(BrowserManager.get_anti_detection_script())
        
        return context

    @staticmethod
    async def load_caches_into_context(context, site_name):
        try:
            cf_cookies = UltimateCacheManager.load_site_cache(site_name, 'cf_cookies')
            if cf_cookies:
                current_time = time.time()
                valid_cookies = []
                for cookie in cf_cookies:
                    expires = cookie.get('expires', 0)
                    if expires == -1 or expires > current_time:
                        valid_cookies.append(cookie)
                
                if valid_cookies:
                    await context.add_cookies(valid_cookies)
                    logger.info(f"‚úÖ Â∑≤‰ªéÁºìÂ≠òÂä†ËΩΩ {len(valid_cookies)} ‰∏™ {site_name} Cloudflare cookies")
        except Exception as e:
            logger.error(f"‚ùå Âä†ËΩΩ {site_name} ÁºìÂ≠òÂà∞‰∏ä‰∏ãÊñáÊó∂Âá∫Èîô: {e}")

    @staticmethod
    def get_anti_detection_script():
        return """
            Object.defineProperty(navigator, 'webdriver', { get: () => undefined });
            Object.defineProperty(navigator, 'plugins', { get: () => [1, 2, 3, 4, 5] });
            Object.defineProperty(navigator, 'languages', { get: () => ['zh-CN', 'zh', 'en-US', 'en'] });
            window.chrome = { runtime: {}, loadTimes: function() {}, csi: function() {}, app: {isInstalled: false} };
            Object.defineProperty(navigator, 'platform', { get: () => 'Win32' });
            Object.defineProperty(navigator, 'hardwareConcurrency', { get: () => 8 });
        """

    @staticmethod
    async def set_random_user_agent(page):
        """‰∏∫È°µÈù¢ËÆæÁΩÆÈöèÊú∫User-Agent"""
        user_agent = random.choice(USER_AGENTS)
        await page.set_extra_http_headers({"User-Agent": user_agent})
        # ÂêåÊó∂Êõ¥Êñ∞navigator.userAgent
        await page.add_init_script(f"Object.defineProperty(navigator, 'userAgent', {{get: () => '{user_agent}'}});")
        logger.info(f"üîÑ Â∑≤ÂàáÊç¢User-Agent: {user_agent[:50]}...")

# ======================== ÁªàÊûÅ‰∏ªËá™Âä®ÂåñÁ±ª ========================
class UltimateSiteAutomator:
    def __init__(self, site_config):
        self.site_config = site_config
        self.browser = None
        self.context = None
        self.page = None
        self.playwright = None
        self.is_logged_in = False
        self.retry_count = 0
        self.session_data = UltimateCacheManager.load_site_cache(site_config['name'], 'session_data') or {}
        self.cf_passed = False
        self.credentials = SITE_CREDENTIALS.get(site_config['name'], {})
        self.domain = site_config['base_url'].replace('https://', '')
        self.cache_saved = False  # Èò≤Ê≠¢ÈáçÂ§ç‰øùÂ≠ò

    async def run_for_site(self, browser, playwright):
        self.browser = browser
        self.playwright = playwright
        
        if not self.credentials.get('username') or not self.credentials.get('password'):
            logger.error(f"‚ùå {self.site_config['name']} ÁöÑÁî®Êà∑ÂêçÊàñÂØÜÁ†ÅÊú™ËÆæÁΩÆÔºåË∑≥ËøáËØ•Á´ôÁÇπ")
            return False
            
        try:
            self.context = await BrowserManager.create_context(browser, self.site_config['name'])
            logger.success(f"‚úÖ {self.site_config['name']} ÊµèËßàÂô®ÁéØÂ¢ÉÂàùÂßãÂåñÂÆåÊàê")

            self.page = await self.context.new_page()
            self.page.set_default_timeout(PAGE_TIMEOUT)
            self.page.set_default_navigation_timeout(PAGE_TIMEOUT)

            while self.retry_count <= RETRY_TIMES:
                try:
                    # Â∞ùËØï‰ΩøÁî®ÁºìÂ≠òÁõ¥Êé•ËÆøÈóÆ
                    cache_success = await self.try_cache_first_approach()
                    if cache_success:
                        logger.success(f"‚úÖ {self.site_config['name']} ÁºìÂ≠ò‰ºòÂÖàÊµÅÁ®ãÊàêÂäü")
                        self.is_logged_in = True
                        self.cf_passed = True
                        # ÂÖ≥ÈîÆ‰øÆÂ§çÔºöÁôªÂΩïÊàêÂäüÂêéÁ´ãÂç≥‰øùÂ≠òÁºìÂ≠ò
                        await self.save_all_caches()
                    else:
                        # ÁºìÂ≠òÂ§±Ë¥•ÔºåËøõË°åÂÆåÊï¥È™åËØÅÊµÅÁ®ã
                        logger.warning(f"‚ö†Ô∏è {self.site_config['name']} ÁºìÂ≠ò‰ºòÂÖàÊµÅÁ®ãÂ§±Ë¥•ÔºåÂºÄÂßãÂÆåÊï¥È™åËØÅ")
                        full_success = await self.full_verification_process()
                        self.is_logged_in = full_success

                    if self.is_logged_in:
                        logger.success(f"‚úÖ {self.site_config['name']} ÁôªÂΩïÊàêÂäüÔºåÂºÄÂßãÊâßË°åÂêéÁª≠‰ªªÂä°")
                        await self.browse_topics()
                        await self.save_final_status(success=True)
                        break
                    else:
                        logger.error(f"‚ùå {self.site_config['name']} ÁôªÂΩïÂ§±Ë¥•")
                        
                        if self.retry_count == 0:
                            if self.cf_passed and not self.is_logged_in:
                                logger.info(f"üîÑ {self.site_config['name']} CloudflareÈÄöËøá‰ΩÜÁôªÂΩïÂ§±Ë¥•ÔºåÂè™Ê∏ÖÈô§ÁôªÂΩïÁºìÂ≠ò")
                                await self.clear_login_caches_only()
                            else:
                                logger.info(f"üîÑ {self.site_config['name']} Ê∏ÖÈô§ÊâÄÊúâÁºìÂ≠òÂπ∂ÈáçËØï")
                                await self.clear_caches()
                        
                        self.retry_count += 1
                        if self.retry_count <= RETRY_TIMES:
                            wait_time = 10 + self.retry_count * 5
                            logger.warning(f"Â∞ÜÂú® {wait_time} ÁßíÂêéÈáçËØï ({self.retry_count}/{RETRY_TIMES})")
                            await asyncio.sleep(wait_time)
                        else:
                            logger.error(f"‚ùå {self.site_config['name']} ÊúÄÂ§ßÈáçËØïÊ¨°Êï∞ËÄóÂ∞ΩÔºåÁªàÊ≠¢ËÑöÊú¨")
                            await self.save_final_status(success=False)
                            return False

                except Exception as e:
                    logger.error(f"{self.site_config['name']} ÂΩìÂâçÂ∞ùËØïÂ§±Ë¥•: {str(e)}")
                    
                    if self.retry_count == 0:
                        logger.info(f"üîÑ {self.site_config['name']} Ê∏ÖÈô§ÁºìÂ≠òÂπ∂ÈáçËØï")
                        await self.clear_caches()
                    
                    self.retry_count += 1

    async def enhanced_check_login_status(self):
        """Â¢ûÂº∫ÁöÑÁôªÂΩïÁä∂ÊÄÅÊ£ÄÊü•"""
        try:
            # Ê£ÄÊü•È°µÈù¢ÊòØÂê¶ÂåÖÂê´ÁôªÂΩïÁõ∏ÂÖ≥ÂÖÉÁ¥†
            login_buttons = await self.page.query_selector_all('a[href*="/login"], button:has-text("ÁôªÂΩï"), button:has-text("Sign in")')
            if len(login_buttons) > 0:
                logger.warning("‚ö†Ô∏è Ê£ÄÊµãÂà∞ÁôªÂΩïÊåâÈíÆÔºåÂèØËÉΩÊú™ÁôªÂΩï")
                return False
                
            # Ê£ÄÊü•È°µÈù¢ÊòØÂê¶ÂåÖÂê´Áî®Êà∑Áõ∏ÂÖ≥ÂÖÉÁ¥†
            user_elements = await self.page.query_selector_all('a[href*="/user"], .user-avatar, .current-user')
            if len(user_elements) > 0:
                logger.success("‚úÖ Ê£ÄÊµãÂà∞Áî®Êà∑ÂÖÉÁ¥†ÔºåÂ∑≤ÁôªÂΩï")
                return True
                
            # Ê£ÄÊü•È°µÈù¢Ê†áÈ¢òÂíåÂÜÖÂÆπ
            page_title = await self.page.title()
            page_content = await self.page.content()
            
            if "ÁôªÂΩï" in page_title or "Sign in" in page_title:
                logger.warning("‚ö†Ô∏è È°µÈù¢Ê†áÈ¢òÂåÖÂê´ÁôªÂΩï‰ø°ÊÅØÔºåÂèØËÉΩÊú™ÁôªÂΩï")
                return False
                
            # ‰Ωú‰∏∫ÊúÄÂêéÁöÑÊâãÊÆµÔºåÊ£ÄÊü•ÊòØÂê¶ËÉΩËÆøÈóÆÈúÄË¶ÅÁôªÂΩïÁöÑÈ°µÈù¢
            try:
                await self.page.goto(self.site_config['latest_topics_url'], timeout=60000, wait_until='networkidle')
                await asyncio.sleep(2)
                
                # ÂÜçÊ¨°Ê£ÄÊü•ÁôªÂΩïÁä∂ÊÄÅ
                new_login_buttons = await self.page.query_selector_all('a[href*="/login"], button:has-text("ÁôªÂΩï")')
                if len(new_login_buttons) == 0:
                    logger.success("‚úÖ È°µÈù¢ÊòæÁ§∫Ê≠£Â∏∏ÂÜÖÂÆπÔºåÂèØËÉΩÂ∑≤ÁôªÂΩï")
                    return True
                else:
                    logger.warning("‚ö†Ô∏è ËÆøÈóÆÊúÄÊñ∞‰∏ªÈ¢òÈ°µÂêé‰ªçÊ£ÄÊµãÂà∞ÁôªÂΩïÊåâÈíÆ")
                    return False
            except Exception as e:
                logger.error(f"Ê£ÄÊü•ÁôªÂΩïÁä∂ÊÄÅÊó∂ËÆøÈóÆÈ°µÈù¢Â§±Ë¥•: {str(e)}")
                return False
                
        except Exception as e:
            logger.error(f"Â¢ûÂº∫ÂûãÁôªÂΩïÁä∂ÊÄÅÊ£ÄÊü•Â§±Ë¥•: {str(e)}")
            return False

    async def browse_topics(self):
        try:
            logger.info(f"üìñ ÂºÄÂßã {self.site_config['name']} ‰∏ªÈ¢òÊµèËßà")
            
            # Âº∫ÂåñÁôªÂΩïÈ™åËØÅÔºöÂú®ÊµèËßàÂâçÊ£ÄÊü•ÁôªÂΩïÁä∂ÊÄÅ
            is_logged_in = await self.enhanced_check_login_status()
            if not is_logged_in:
                logger.warning("‚ö†Ô∏è Ê£ÄÊµãÂà∞Êú™ÁôªÂΩïÁä∂ÊÄÅÔºåÂ∞ùËØïÈáçÊñ∞ÁôªÂΩï")
                # Â∞ùËØïÈáçÊñ∞ÁôªÂΩï
                login_success = await self.perform_login()  # ÂÅáËÆæÂ≠òÂú®Ëøô‰∏™ÁôªÂΩïÊñπÊ≥ï
                if not login_success:
                    logger.error("‚ùå ÈáçÊñ∞ÁôªÂΩïÂ§±Ë¥•ÔºåÊó†Ê≥ïÁªßÁª≠ÊµèËßà‰∏ªÈ¢ò")
                    return
                logger.success("‚úÖ ÈáçÊñ∞ÁôªÂΩïÊàêÂäüÔºåÁªßÁª≠ÊµèËßà‰∏ªÈ¢ò")
            
            browse_history = self.session_data.get('browse_history', [])
            
            await self.page.goto(self.site_config['latest_topics_url'], timeout=60000, wait_until='networkidle')
            
            # Â∞ùËØïÂ§öÁßçÈÄâÊã©Âô®
            topic_selectors = ['a.title', '.title a', 'a.topic-title', '.topic-list-item a', 'tr.topic-list-item a.title']
            topic_links = []
            
            for selector in topic_selectors:
                links = await self.page.query_selector_all(selector)
                if links:
                    logger.info(f"‚úÖ ‰ΩøÁî®ÈÄâÊã©Âô® '{selector}' ÊâæÂà∞ {len(links)} ‰∏™‰∏ªÈ¢òÈìæÊé•")
                    topic_links = links
                    break
            
            if not topic_links:
                logger.warning(f"{self.site_config['name']} Êú™ÊâæÂà∞‰∏ªÈ¢òÈìæÊé•")
                return
            
            browse_count = min(random.randint(5, 9), len(topic_links))
            selected_topics = random.sample(topic_links, browse_count)
            
            logger.info(f"üìö {self.site_config['name']} ËÆ°ÂàíÊµèËßà {browse_count} ‰∏™‰∏ªÈ¢ò")
            
            success_count = 0
            for idx, topic in enumerate(selected_topics, 1):
                success = await self.browse_single_topic(topic, idx, browse_count, browse_history)
                if success:
                    success_count += 1
                    
                if idx < browse_count:
                    # ÈöèÊú∫ÂåñÊµèËßàÈó¥ÈöîÔºå‰ΩøÈó¥ÈöîÊõ¥‰∏çËßÑÂæã
                    wait_time = random.choice([
                        random.uniform(3, 5),
                        random.uniform(7, 12),
                        random.uniform(15, 20),
                        random.uniform(25, 35)
                    ])
                    logger.info(f"‚è≥ ‰∏ªÈ¢òÈó¥Á≠âÂæÖ {wait_time:.1f} Áßí")
                    await asyncio.sleep(wait_time)
            
            self.session_data['browse_history'] = browse_history[-50:]
            self.session_data['last_browse'] = datetime.now().isoformat()
            self.session_data['total_browsed'] = self.session_data.get('total_browsed', 0) + success_count
            
            # ‰∏ªÈ¢òÊµèËßàÂÆåÊàêÂêé‰øùÂ≠ò‰∏ÄÊ¨°ÁºìÂ≠ò
            if not self.cache_saved:
                await self.save_all_caches()
            
            logger.success(f"‚úÖ {self.site_config['name']} ‰∏ªÈ¢òÊµèËßàÂÆåÊàê: ÊàêÂäü {success_count} ‰∏™‰∏ªÈ¢ò")

        except Exception as e:
            logger.error(f"{self.site_config['name']} ‰∏ªÈ¢òÊµèËßàÊµÅÁ®ãÂ§±Ë¥•: {str(e)}")

    async def browse_single_topic(self, topic, topic_idx, total_topics, browse_history):
        """ÊµèËßàÂçï‰∏™‰∏ªÈ¢òÂπ∂Ê®°ÊãüÊõ¥ÁúüÂÆûÁöÑÁî®Êà∑Ë°å‰∏∫"""
        try:
            title = (await topic.text_content() or "").strip()[:60]
            href = await topic.get_attribute('href')
            
            if not href:
                return False
            
            topic_url = f"{self.site_config['base_url']}{href}" if href.startswith('/') else href
            
            if href in browse_history:
                logger.info(f"üîÑ {self.site_config['name']} ‰∏ªÈ¢ò {topic_idx}/{total_topics} Â∑≤ÊµèËßàËøáÔºåË∑≥Ëøá")
                return False
            
            logger.info(f"üåê {self.site_config['name']} ÊµèËßà‰∏ªÈ¢ò {topic_idx}/{total_topics}: {title}")
            
            # ÂàõÂª∫Êñ∞È°µÈù¢Âπ∂ËÆæÁΩÆÈöèÊú∫User-Agent
            tab = await self.context.new_page()
            await BrowserManager.set_random_user_agent(tab)
            
            try:
                # ÈöèÊú∫ÂæÆÂ∞èÂª∂ËøüÂêéÂÜçËÆøÈóÆ
                await asyncio.sleep(random.uniform(0.5, 2.0))
                
                await tab.goto(topic_url, timeout=45000, wait_until='domcontentloaded')
                
                # Ê®°ÊãüÈöèÊú∫Èº†Ê†áÁßªÂä®Âà∞‰∏ªÈ¢òÊ†áÈ¢ò
                topic_element = await tab.query_selector('h1, .topic-title')
                if topic_element:
                    box = await topic_element.bounding_box()
                    if box:
                        # ÈöèÊú∫ÁßªÂä®Ë∑ØÂæÑ
                        start_x = random.uniform(50, 200)
                        start_y = random.uniform(50, 200)
                        await tab.mouse.move(start_x, start_y, steps=random.randint(5, 15))
                        
                        # ÁßªÂä®Âà∞ÂÖÉÁ¥†
                        await tab.mouse.move(
                            box['x'] + box['width'] / 2 + random.uniform(-10, 10),
                            box['y'] + box['height'] / 2 + random.uniform(-10, 10),
                            steps=random.randint(10, 30)
                        )
                        await asyncio.sleep(random.uniform(0.5, 1.5))
                
                # Ê®°ÊãüÈòÖËØªÊó∂Èó¥ÂíåÊªöÂä®Ë°å‰∏∫ÔºåÂª∂ÈïøÊúÄÁü≠ÂÅúÁïôÊó∂Èó¥
                total_read_time = random.choice([
                    random.uniform(45, 70),  # Áü≠ÈòÖËØª
                    random.uniform(80, 120), # ‰∏≠Á≠âÈòÖËØª
                    random.uniform(150, 240) # ÈïøÈòÖËØª
                ])
                logger.info(f"‚è≥ ËÆ°ÂàíÈòÖËØªÊó∂Èó¥: {total_read_time:.1f} Áßí")
                
                scroll_interval = random.uniform(2, 8)  # ÊØèÊ¨°ÊªöÂä®Èó¥Èöî
                total_scroll_steps = math.ceil(total_read_time / scroll_interval)
                
                # ÂÖàÁ≠âÂæÖ3-8ÁßíÂÜçÂºÄÂßãÊªöÂä®ÔºåÊ®°ÊãüÁî®Êà∑ÂÖàÁúãÊ†áÈ¢ò
                initial_wait = random.uniform(3, 8)
                logger.info(f"‚è≥ ÂàùÂßãÈòÖËØªÁ≠âÂæÖ: {initial_wait:.1f} Áßí")
                await asyncio.sleep(initial_wait)
                
                # ÈÄêÊ≠•ÊªöÂä®Âà∞È°µÈù¢Â∫ïÈÉ®
                for step in range(total_scroll_steps):
                    # ÈöèÊú∫ÂÜ≥ÂÆöÊòØÂê¶Âú®Ëøô‰∏ÄÊ≠•Ê∑ªÂä†È¢ùÂ§ñË°å‰∏∫
                    if random.random() < 0.3:  # 30%ÁöÑÊ¶ÇÁéá
                        # ÈöèÊú∫ÁÇπÂáªÈ°µÈù¢Á©∫ÁôΩÂ§Ñ
                        if random.random() < 0.5:
                            page_width = await tab.evaluate("document.body.scrollWidth")
                            page_height = await tab.evaluate("document.body.scrollHeight")
                            
                            click_x = random.uniform(page_width * 0.1, page_width * 0.9)
                            click_y = random.uniform(page_height * 0.1, page_height * 0.9)
                            
                            await tab.mouse.move(click_x, click_y, steps=random.randint(5, 20))
                            await asyncio.sleep(random.uniform(0.1, 0.5))
                            await tab.mouse.click(click_x, click_y, button=MouseButton.LEFT)
                            logger.info(f"üñ±Ô∏è ÈöèÊú∫ÁÇπÂáª‰ΩçÁΩÆ: ({click_x:.0f}, {click_y:.0f})")
                            await asyncio.sleep(random.uniform(1, 3))
                    
                    # ËÆ°ÁÆóÂΩìÂâçÊªöÂä®‰ΩçÁΩÆ (0.0 Âà∞ 1.0)ÔºåÂä†ÂÖ•‰∏Ä‰∫õÈöèÊú∫ÊÄß
                    scroll_position = min(step / total_scroll_steps + random.uniform(-0.05, 0.05), 1.0)
                    scroll_position = max(scroll_position, 0.0)
                    
                    # ‰ΩøÁî®JavaScriptÊªöÂä®Âà∞Áõ∏Â∫î‰ΩçÁΩÆ
                    await tab.evaluate(f"window.scrollTo(0, document.body.scrollHeight * {scroll_position});")
                    
                    # ÈöèÊú∫ÂæÆÂ∞èÂÅúÈ°øÔºåÊ®°ÊãüÈòÖËØªË°å‰∏∫
                    await asyncio.sleep(scroll_interval + random.uniform(-0.5, 0.5))
                
                # Âà∞ËææÂ∫ïÈÉ®ÂêéÂÜçÂÅúÁïô5-10Áßí
                final_wait = random.uniform(5, 10)
                logger.info(f"‚è≥ Â∫ïÈÉ®ÂÅúÁïôÊó∂Èó¥: {final_wait:.1f} Áßí")
                await asyncio.sleep(final_wait)
                
                browse_history.append(href)
                return True
            finally:
                # ÂÖ≥Èó≠Ê†áÁ≠æÈ°µÂâçÈöèÊú∫Âª∂Ëøü
                await asyncio.sleep(random.uniform(0.5, 2.0))
                await tab.close()
                
        except Exception as e:
            logger.error(f"{self.site_config['name']} ÊµèËßàÂçï‰∏™‰∏ªÈ¢òÂ§±Ë¥•: {str(e)}")
            return False

    # ‰ª•‰∏ãÊòØÂÅáËÆæÂ≠òÂú®ÁöÑÂÖ∂‰ªñÊñπÊ≥ïÔºå‰øùÊåÅÂéüÊúâÈÄªËæë
    async def try_cache_first_approach(self):
        # ÂéüÊúâÈÄªËæë‰øùÊåÅ‰∏çÂèò
        # Ê£ÄÊµãÂà∞ÊúâÊïàÁöÑCloudflareÁºìÂ≠òÔºåÂ∞ùËØïÁõ¥Êé•ËÆøÈóÆ
        cf_valid = await CloudflareHandler.is_cached_cf_valid(self.site_config['name'])
        if cf_valid:
            logger.info("‚úÖ Ê£ÄÊµãÂà∞ÊúâÊïàÁöÑCloudflareÁºìÂ≠òÔºåÂ∞ùËØïÁõ¥Êé•ËÆøÈóÆ")
            try:
                await self.page.goto(self.site_config['latest_topics_url'], timeout=60000, wait_until='networkidle')
                await asyncio.sleep(3)
                
                # Ê£ÄÊü•ÁôªÂΩïÁä∂ÊÄÅ
                if await self.enhanced_check_login_status():
                    logger.success("‚úÖ ÁºìÂ≠ò‰ºòÂÖàÊµÅÁ®ãÊàêÂäü - Â∑≤ÁôªÂΩï")
                    return True
                else:
                    logger.warning("‚ö†Ô∏è ÁºìÂ≠ò‰ºòÂÖàÊµÅÁ®ã - Êú™ÁôªÂΩï")
                    return False
            except Exception as e:
                logger.error(f"ÁºìÂ≠ò‰ºòÂÖàÊµÅÁ®ãÂ§±Ë¥•: {str(e)}")
                return False
        return False

    async def full_verification_process(self):
        # ÂéüÊúâÈÄªËæë‰øùÊåÅ‰∏çÂèò
        try:
            # Â§ÑÁêÜCloudflareÈ™åËØÅ
            cf_success = await CloudflareHandler.handle_cloudflare(self.page, self.site_config)
            self.cf_passed = cf_success
            
            if not cf_success:
                logger.error("‚ùå CloudflareÈ™åËØÅÂ§±Ë¥•")
                return False
                
            # Ê£ÄÊü•ÁôªÂΩïÁä∂ÊÄÅ
            if await self.enhanced_check_login_status():
                logger.success("‚úÖ Â∑≤ÁôªÂΩïÔºåÊó†ÈúÄÈáçÊñ∞ÁôªÂΩï")
                return True
                
            # ÊâßË°åÁôªÂΩï
            return await self.perform_login()
        except Exception as e:
            logger.error(f"ÂÆåÊï¥È™åËØÅÊµÅÁ®ãÂ§±Ë¥•: {str(e)}")
            return False

    async def perform_login(self):
        # ÂéüÊúâÁôªÂΩïÈÄªËæë‰øùÊåÅ‰∏çÂèò
        try:
            logger.info(f"üîë ÂºÄÂßã {self.site_config['name']} ÁôªÂΩïÊµÅÁ®ã")
            await self.page.goto(self.site_config['login_url'], timeout=60000, wait_until='networkidle')
            
            # ËøôÈáåÊ∑ªÂä†ÂÆûÈôÖÁôªÂΩïÈÄªËæëÔºåÊ†πÊçÆÁΩëÁ´ôË°®ÂçïÂ≠óÊÆµË∞ÉÊï¥
            await self.page.fill('#login-username', self.credentials['username'])
            await asyncio.sleep(random.uniform(1, 2))
            await self.page.fill('#login-password', self.credentials['password'])
            await asyncio.sleep(random.uniform(1, 2))
            
            await self.page.click('button[type="submit"]')
            await self.page.wait_for_load_state('networkidle', timeout=60000)
            
            # È™åËØÅÁôªÂΩïÊòØÂê¶ÊàêÂäü
            if await self.enhanced_check_login_status():
                logger.success(f"‚úÖ {self.site_config['name']} ÁôªÂΩïÊàêÂäü")
                return True
            else:
                logger.error(f"‚ùå {self.site_config['name']} ÁôªÂΩïÂ§±Ë¥•")
                return False
        except Exception as e:
            logger.error(f"{self.site_config['name']} ÁôªÂΩïËøáÁ®ãÂá∫Èîô: {str(e)}")
            return False

    async def save_all_caches(self):
        # ‰øùÂ≠òCloudflare cookies
        cf_cookies = await self.context.cookies()
        UltimateCacheManager.save_site_cache(cf_cookies, self.site_config['name'], 'cf_cookies')
        logger.info(f"‚úÖ {self.site_config['name']} Cloudflare Cookies Â∑≤‰øùÂ≠ò: {len(cf_cookies)} ‰∏™")
        
        # ‰øùÂ≠òÊµèËßàÂô®Áä∂ÊÄÅ
        state = await self.context.storage_state()
        UltimateCacheManager.save_site_cache(state, self.site_config['name'], 'browser_state')
        
        # ‰øùÂ≠ò‰ºöËØùÊï∞ÊçÆ
        UltimateCacheManager.save_site_cache(self.session_data, self.site_config['name'], 'session_data')
        
        self.cache_saved = True
        logger.info(f"‚úÖ {self.site_config['name']} ÊâÄÊúâÁºìÂ≠òÂ∑≤‰øùÂ≠òÔºàË¶ÜÁõñÊóßÁºìÂ≠òÔºâ")

    async def save_final_status(self, success):
        status_data = {
            'success': success,
            'timestamp': datetime.now().isoformat(),
            'site': self.site_config['name'],
            'login_status': self.is_logged_in,
            'cf_passed': self.cf_passed,
            'retry_count': self.retry_count
        }
        UltimateCacheManager.save_cache(status_data, self.site_config['final_status_file'])

    async def clear_caches(self):
        # Ê∏ÖÈô§ÊâÄÊúâÁºìÂ≠ò
        cache_types = ['cf_cookies', 'browser_state', 'session_data']
        for cache_type in cache_types:
            file_name = f"{cache_type}_{self.site_config['name']}.json"
            if os.path.exists(file_name):
                os.remove(file_name)
                logger.info(f"üóëÔ∏è Â∑≤Âà†Èô§ {self.site_config['name']} {cache_type} ÁºìÂ≠ò")

    async def clear_login_caches_only(self):
        # Âè™Ê∏ÖÈô§ÁôªÂΩïÁõ∏ÂÖ≥ÁºìÂ≠òÔºå‰øùÁïôCloudflareÁºìÂ≠ò
        cache_types = ['browser_state', 'session_data']
        for cache_type in cache_types:
            file_name = f"{cache_type}_{self.site_config['name']}.json"
            if os.path.exists(file_name):
                os.remove(file_name)
                logger.info(f"üóëÔ∏è Â∑≤Âà†Èô§ {self.site_config['name']} {cache_type} ÁºìÂ≠ò")

    async def close_context(self):
        if self.context:
            await self.context.close()
            logger.info(f"‚úÖ {self.site_config['name']} ÊµèËßàÂô®‰∏ä‰∏ãÊñáÂ∑≤ÂÖ≥Èó≠")
